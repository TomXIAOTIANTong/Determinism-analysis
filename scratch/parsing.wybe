resource parsing:string

def epsilon { pass }
def {partial} int(?i:int) use !parsing { ... }
def {partial} comma use !parsing { ... }

def foo(sep:{partial,resource}()) use !parsing2 { ... }

def sep_by(sep:{partial,resource}(),
           item:{partial,resource}(?i:?I),
           ?ls:list(?I), !*parsing) use !parsing, !parsing2 {
    ?previous = epsilon
    ?acc = snoc_list
    
    use parsing2 { 
        ?parsing2 = bar
        do {
            !previous
            ?previous = sep
            !item(?i)
            ?acc = [acc | i]
            alloc(?mem, 8)
            *mem = parsing2
            !foo(sep, mem)
        }

    }
    ?parsing2

    ?ls = list(acc)
}


def map(f:{resource}(?a, ?:?b), as:list(?a), ?bs:list(?b)) {
    if { [?a | ?as] = as :: 
            !f(a, ?b)
            !map(f, as, ?bs)
            ?bs = [b | bs]
       | else :: 
            ?bs = []
       }
}


