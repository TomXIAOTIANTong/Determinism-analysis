======================================================================
AFTER EVERYTHING:
 Module multictr2
  representation  : (not a type)
  public submods  : t -> multictr2.t
  public resources: 
  public procs    : multictr2.print_t<0>
                    multictr2.t.=<0>
                    multictr2.t.c01<0>
                    multictr2.t.c01<1>
                    multictr2.t.c02<0>
                    multictr2.t.c02<1>
                    multictr2.t.c03<0>
                    multictr2.t.c03<1>
                    multictr2.t.c04<0>
                    multictr2.t.c04<1>
                    multictr2.t.c05<0>
                    multictr2.t.c05<1>
                    multictr2.t.c06<0>
                    multictr2.t.c06<1>
                    multictr2.t.c07<0>
                    multictr2.t.c07<1>
                    multictr2.t.c08<0>
                    multictr2.t.c08<1>
                    multictr2.t.f01<0>
                    multictr2.t.f01<1>
                    multictr2.t.f02<0>
                    multictr2.t.f02<1>
                    multictr2.t.f03<0>
                    multictr2.t.f03<1>
                    multictr2.t.f04<0>
                    multictr2.t.f04<1>
                    multictr2.t.f05<0>
                    multictr2.t.f05<1>
                    multictr2.t.f06<0>
                    multictr2.t.f06<1>
                    multictr2.t.f07<0>
                    multictr2.t.f07<1>
                    multictr2.t.f08_a<0>
                    multictr2.t.f08_a<1>
                    multictr2.t.f08_b<0>
                    multictr2.t.f08_b<1>
                    multictr2.t.f08_c<0>
                    multictr2.t.f08_c<1>
                    multictr2.t.~=<0>
  imports         : public use multictr2.t
                    use wybe
  resources       : 
  submodules      : multictr2.t
  procs           : 

print_t > public (0 calls)
0: multictr2.print_t<0>
print_t(x##0:multictr2.t)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(x##0:wybe.int, 7:wybe.int, ?tmp#9##0:wybe.int)
    foreign llvm icmp_eq(tmp#9##0:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.bool)
    case ~tmp#10##0:wybe.bool of
    0:
        foreign llvm icmp_eq(tmp#9##0:wybe.int, 1:wybe.int, ?tmp#13##0:wybe.bool)
        case ~tmp#13##0:wybe.bool of
        0:
            foreign llvm icmp_eq(tmp#9##0:wybe.int, 2:wybe.int, ?tmp#16##0:wybe.bool)
            case ~tmp#16##0:wybe.bool of
            0:
                foreign llvm icmp_eq(tmp#9##0:wybe.int, 3:wybe.int, ?tmp#19##0:wybe.bool)
                case ~tmp#19##0:wybe.bool of
                0:
                    foreign llvm icmp_eq(tmp#9##0:wybe.int, 4:wybe.int, ?tmp#22##0:wybe.bool)
                    case ~tmp#22##0:wybe.bool of
                    0:
                        foreign llvm icmp_eq(tmp#9##0:wybe.int, 5:wybe.int, ?tmp#25##0:wybe.bool)
                        case ~tmp#25##0:wybe.bool of
                        0:
                            foreign llvm icmp_eq(tmp#9##0:wybe.int, 6:wybe.int, ?tmp#28##0:wybe.bool)
                            case ~tmp#28##0:wybe.bool of
                            0:
                                foreign llvm icmp_eq(~tmp#9##0:wybe.int, 7:wybe.int, ?tmp#31##0:wybe.bool)
                                case ~tmp#31##0:wybe.bool of
                                0:
                                    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#32##0:wybe.phantom) @io:nn:nn
                                    foreign c putchar('\n':wybe.char, ~tmp#32##0:wybe.phantom, ?tmp#33##0:wybe.phantom) @io:nn:nn
                                    foreign lpvm store(~%tmp#33##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

                                1:
                                    foreign lpvm access(x##0:multictr2.t, -7:wybe.int, 24:wybe.int, 7:wybe.int, ?a##7:wybe.int) @multictr2:nn:nn
                                    foreign lpvm access(x##0:multictr2.t, 1:wybe.int, 24:wybe.int, 7:wybe.int, ?b##0:wybe.int) @multictr2:nn:nn
                                    foreign lpvm access(~x##0:multictr2.t, 9:wybe.int, 24:wybe.int, 7:wybe.int, ?c##0:wybe.float) @multictr2:nn:nn
                                    wybe.string.print<0>("c08(":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #36 @multictr2:nn:nn
                                    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#33##0:wybe.phantom) @int:nn:nn
                                    foreign c print_int(~a##7:wybe.int, ~tmp#33##0:wybe.phantom, ?tmp#34##0:wybe.phantom) @int:nn:nn
                                    foreign lpvm store(~%tmp#34##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
                                    wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #38 @multictr2:nn:nn
                                    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#36##0:wybe.phantom) @int:nn:nn
                                    foreign c print_int(~b##0:wybe.int, ~tmp#36##0:wybe.phantom, ?tmp#37##0:wybe.phantom) @int:nn:nn
                                    foreign lpvm store(~%tmp#37##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
                                    wybe.string.print<0>(", ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #40 @multictr2:nn:nn
                                    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#39##0:wybe.phantom) @float:nn:nn
                                    foreign c print_float(~c##0:wybe.float, ~tmp#39##0:wybe.phantom, ?tmp#40##0:wybe.phantom) @float:nn:nn
                                    foreign lpvm store(~%tmp#40##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @float:nn:nn
                                    wybe.string.print<0>(")":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #42 @multictr2:nn:nn
                                    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#41##0:wybe.phantom) @io:nn:nn
                                    foreign c putchar('\n':wybe.char, ~tmp#41##0:wybe.phantom, ?tmp#42##0:wybe.phantom) @io:nn:nn
                                    foreign lpvm store(~%tmp#42##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


                            1:
                                foreign lpvm access(~x##0:multictr2.t, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?a##6:wybe.int) @multictr2:nn:nn
                                wybe.string.print<0>("c07(":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #31 @multictr2:nn:nn
                                foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#30##0:wybe.phantom) @int:nn:nn
                                foreign c print_int(~a##6:wybe.int, ~tmp#30##0:wybe.phantom, ?tmp#31##0:wybe.phantom) @int:nn:nn
                                foreign lpvm store(~%tmp#31##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
                                wybe.string.print<0>(")":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #33 @multictr2:nn:nn
                                foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#32##0:wybe.phantom) @io:nn:nn
                                foreign c putchar('\n':wybe.char, ~tmp#32##0:wybe.phantom, ?tmp#33##0:wybe.phantom) @io:nn:nn
                                foreign lpvm store(~%tmp#33##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


                        1:
                            foreign lpvm access(~x##0:multictr2.t, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?a##5:wybe.int) @multictr2:nn:nn
                            wybe.string.print<0>("c06(":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #26 @multictr2:nn:nn
                            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#27##0:wybe.phantom) @int:nn:nn
                            foreign c print_int(~a##5:wybe.int, ~tmp#27##0:wybe.phantom, ?tmp#28##0:wybe.phantom) @int:nn:nn
                            foreign lpvm store(~%tmp#28##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
                            wybe.string.print<0>(")":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #28 @multictr2:nn:nn
                            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#29##0:wybe.phantom) @io:nn:nn
                            foreign c putchar('\n':wybe.char, ~tmp#29##0:wybe.phantom, ?tmp#30##0:wybe.phantom) @io:nn:nn
                            foreign lpvm store(~%tmp#30##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


                    1:
                        foreign lpvm access(~x##0:multictr2.t, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?a##4:wybe.int) @multictr2:nn:nn
                        wybe.string.print<0>("c05(":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #21 @multictr2:nn:nn
                        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#24##0:wybe.phantom) @int:nn:nn
                        foreign c print_int(~a##4:wybe.int, ~tmp#24##0:wybe.phantom, ?tmp#25##0:wybe.phantom) @int:nn:nn
                        foreign lpvm store(~%tmp#25##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
                        wybe.string.print<0>(")":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #23 @multictr2:nn:nn
                        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#26##0:wybe.phantom) @io:nn:nn
                        foreign c putchar('\n':wybe.char, ~tmp#26##0:wybe.phantom, ?tmp#27##0:wybe.phantom) @io:nn:nn
                        foreign lpvm store(~%tmp#27##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


                1:
                    foreign lpvm access(~x##0:multictr2.t, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?a##3:wybe.int) @multictr2:nn:nn
                    wybe.string.print<0>("c04(":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #16 @multictr2:nn:nn
                    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @int:nn:nn
                    foreign c print_int(~a##3:wybe.int, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @int:nn:nn
                    foreign lpvm store(~%tmp#22##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
                    wybe.string.print<0>(")":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #18 @multictr2:nn:nn
                    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#23##0:wybe.phantom) @io:nn:nn
                    foreign c putchar('\n':wybe.char, ~tmp#23##0:wybe.phantom, ?tmp#24##0:wybe.phantom) @io:nn:nn
                    foreign lpvm store(~%tmp#24##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


            1:
                foreign lpvm access(~x##0:multictr2.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?a##2:wybe.int) @multictr2:nn:nn
                wybe.string.print<0>("c03(":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #11 @multictr2:nn:nn
                foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#18##0:wybe.phantom) @int:nn:nn
                foreign c print_int(~a##2:wybe.int, ~tmp#18##0:wybe.phantom, ?tmp#19##0:wybe.phantom) @int:nn:nn
                foreign lpvm store(~%tmp#19##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
                wybe.string.print<0>(")":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #13 @multictr2:nn:nn
                foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#20##0:wybe.phantom) @io:nn:nn
                foreign c putchar('\n':wybe.char, ~tmp#20##0:wybe.phantom, ?tmp#21##0:wybe.phantom) @io:nn:nn
                foreign lpvm store(~%tmp#21##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


        1:
            foreign lpvm access(~x##0:multictr2.t, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?a##1:wybe.int) @multictr2:nn:nn
            wybe.string.print<0>("c03(":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #6 @multictr2:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#15##0:wybe.phantom) @int:nn:nn
            foreign c print_int(~a##1:wybe.int, ~tmp#15##0:wybe.phantom, ?tmp#16##0:wybe.phantom) @int:nn:nn
            foreign lpvm store(~%tmp#16##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
            wybe.string.print<0>(")":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #8 @multictr2:nn:nn
            foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#17##0:wybe.phantom) @io:nn:nn
            foreign c putchar('\n':wybe.char, ~tmp#17##0:wybe.phantom, ?tmp#18##0:wybe.phantom) @io:nn:nn
            foreign lpvm store(~%tmp#18##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


    1:
        foreign lpvm access(~x##0:multictr2.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?a##0:wybe.int) @multictr2:nn:nn
        wybe.string.print<0>("c01(":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #1 @multictr2:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#12##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~a##0:wybe.int, ~tmp#12##0:wybe.phantom, ?tmp#13##0:wybe.phantom) @int:nn:nn
        foreign lpvm store(~%tmp#13##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
        wybe.string.print<0>(")":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @multictr2:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#14##0:wybe.phantom) @io:nn:nn
        foreign c putchar('\n':wybe.char, ~tmp#14##0:wybe.phantom, ?tmp#15##0:wybe.phantom) @io:nn:nn
        foreign lpvm store(~%tmp#15##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


  LLVM code       :

; ModuleID = 'multictr2'


 


@multictr2.3 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @multictr2.2 to i64) }


@multictr2.17 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @multictr2.16 to i64) }


@multictr2.1 =    constant {i64, i64} { i64 4, i64 ptrtoint ([?? x i8]* @multictr2.0 to i64) }


@multictr2.11 =    constant {i64, i64} { i64 4, i64 ptrtoint ([?? x i8]* @multictr2.10 to i64) }


@multictr2.13 =    constant {i64, i64} { i64 4, i64 ptrtoint ([?? x i8]* @multictr2.12 to i64) }


@multictr2.15 =    constant {i64, i64} { i64 4, i64 ptrtoint ([?? x i8]* @multictr2.14 to i64) }


@multictr2.5 =    constant {i64, i64} { i64 4, i64 ptrtoint ([?? x i8]* @multictr2.4 to i64) }


@multictr2.7 =    constant {i64, i64} { i64 4, i64 ptrtoint ([?? x i8]* @multictr2.6 to i64) }


@multictr2.9 =    constant {i64, i64} { i64 4, i64 ptrtoint ([?? x i8]* @multictr2.8 to i64) }


@multictr2.2 =    constant [?? x i8] c")\00"


@multictr2.16 =    constant [?? x i8] c", \00"


@multictr2.0 =    constant [?? x i8] c"c01(\00"


@multictr2.4 =    constant [?? x i8] c"c03(\00"


@multictr2.6 =    constant [?? x i8] c"c04(\00"


@multictr2.8 =    constant [?? x i8] c"c05(\00"


@multictr2.10 =    constant [?? x i8] c"c06(\00"


@multictr2.12 =    constant [?? x i8] c"c07(\00"


@multictr2.14 =    constant [?? x i8] c"c08(\00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  void @print_float(double)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"multictr2.print_t<0>"(i64  %"x##0")    {
entry:
  %"1#tmp#9##0" = and i64 %"x##0", 7 
  %"1#tmp#10##0" = icmp eq i64 %"1#tmp#9##0", 0 
  br i1 %"1#tmp#10##0", label %if.then, label %if.else 
if.then:
  %0 = inttoptr i64 %"x##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multictr2.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %2)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multictr2.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else:
  %"3#tmp#13##0" = icmp eq i64 %"1#tmp#9##0", 1 
  br i1 %"3#tmp#13##0", label %if.then1, label %if.else1 
if.then1:
  %3 = add   i64 %"x##0", -1 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multictr2.5, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %6)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multictr2.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else1:
  %"5#tmp#16##0" = icmp eq i64 %"1#tmp#9##0", 2 
  br i1 %"5#tmp#16##0", label %if.then2, label %if.else2 
if.then2:
  %7 = add   i64 %"x##0", -2 
  %8 = inttoptr i64 %7 to i64* 
  %9 = getelementptr  i64, i64* %8, i64 0 
  %10 = load  i64, i64* %9 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multictr2.5, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %10)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multictr2.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else2:
  %"7#tmp#19##0" = icmp eq i64 %"1#tmp#9##0", 3 
  br i1 %"7#tmp#19##0", label %if.then3, label %if.else3 
if.then3:
  %11 = add   i64 %"x##0", -3 
  %12 = inttoptr i64 %11 to i64* 
  %13 = getelementptr  i64, i64* %12, i64 0 
  %14 = load  i64, i64* %13 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multictr2.7, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %14)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multictr2.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else3:
  %"9#tmp#22##0" = icmp eq i64 %"1#tmp#9##0", 4 
  br i1 %"9#tmp#22##0", label %if.then4, label %if.else4 
if.then4:
  %15 = add   i64 %"x##0", -4 
  %16 = inttoptr i64 %15 to i64* 
  %17 = getelementptr  i64, i64* %16, i64 0 
  %18 = load  i64, i64* %17 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multictr2.9, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %18)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multictr2.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else4:
  %"11#tmp#25##0" = icmp eq i64 %"1#tmp#9##0", 5 
  br i1 %"11#tmp#25##0", label %if.then5, label %if.else5 
if.then5:
  %19 = add   i64 %"x##0", -5 
  %20 = inttoptr i64 %19 to i64* 
  %21 = getelementptr  i64, i64* %20, i64 0 
  %22 = load  i64, i64* %21 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multictr2.11, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %22)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multictr2.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else5:
  %"13#tmp#28##0" = icmp eq i64 %"1#tmp#9##0", 6 
  br i1 %"13#tmp#28##0", label %if.then6, label %if.else6 
if.then6:
  %23 = add   i64 %"x##0", -6 
  %24 = inttoptr i64 %23 to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multictr2.13, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %26)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multictr2.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else6:
  %"15#tmp#31##0" = icmp eq i64 %"1#tmp#9##0", 7 
  br i1 %"15#tmp#31##0", label %if.then7, label %if.else7 
if.then7:
  %27 = add   i64 %"x##0", -7 
  %28 = inttoptr i64 %27 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %31 = add   i64 %"x##0", 1 
  %32 = inttoptr i64 %31 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  %34 = load  i64, i64* %33 
  %35 = add   i64 %"x##0", 9 
  %36 = inttoptr i64 %35 to double* 
  %37 = getelementptr  double, double* %36, i64 0 
  %38 = load  double, double* %37 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multictr2.15, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %30)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multictr2.17, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %34)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multictr2.17, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_float(double  %38)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @multictr2.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
if.else7:
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module multictr2.t
  representation  : address
  public submods  : 
  public resources: 
  public procs    : multictr2.t.=<0>
                    multictr2.t.c01<0>
                    multictr2.t.c01<1>
                    multictr2.t.c02<0>
                    multictr2.t.c02<1>
                    multictr2.t.c03<0>
                    multictr2.t.c03<1>
                    multictr2.t.c04<0>
                    multictr2.t.c04<1>
                    multictr2.t.c05<0>
                    multictr2.t.c05<1>
                    multictr2.t.c06<0>
                    multictr2.t.c06<1>
                    multictr2.t.c07<0>
                    multictr2.t.c07<1>
                    multictr2.t.c08<0>
                    multictr2.t.c08<1>
                    multictr2.t.f01<0>
                    multictr2.t.f01<1>
                    multictr2.t.f02<0>
                    multictr2.t.f02<1>
                    multictr2.t.f03<0>
                    multictr2.t.f03<1>
                    multictr2.t.f04<0>
                    multictr2.t.f04<1>
                    multictr2.t.f05<0>
                    multictr2.t.f05<1>
                    multictr2.t.f06<0>
                    multictr2.t.f06<1>
                    multictr2.t.f07<0>
                    multictr2.t.f07<1>
                    multictr2.t.f08_a<0>
                    multictr2.t.f08_a<1>
                    multictr2.t.f08_b<0>
                    multictr2.t.f08_b<1>
                    multictr2.t.f08_c<0>
                    multictr2.t.f08_c<1>
                    multictr2.t.~=<0>
  imports         : use multictr2
                    use wybe
  resources       : 
  procs           : 

= > public (1 calls)
0: multictr2.t.=<0>
=(#left##0:multictr2.t, #right##0:multictr2.t, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#left##0:wybe.int, 7:wybe.int, ?tmp#28##0:wybe.int)
    foreign llvm icmp_eq(tmp#28##0:wybe.int, 0:wybe.int, ?tmp#29##0:wybe.bool)
    case ~tmp#29##0:wybe.bool of
    0:
        foreign llvm icmp_eq(tmp#28##0:wybe.int, 1:wybe.int, ?tmp#32##0:wybe.bool)
        case ~tmp#32##0:wybe.bool of
        0:
            foreign llvm icmp_eq(tmp#28##0:wybe.int, 2:wybe.int, ?tmp#35##0:wybe.bool)
            case ~tmp#35##0:wybe.bool of
            0:
                foreign llvm icmp_eq(tmp#28##0:wybe.int, 3:wybe.int, ?tmp#38##0:wybe.bool)
                case ~tmp#38##0:wybe.bool of
                0:
                    foreign llvm icmp_eq(tmp#28##0:wybe.int, 4:wybe.int, ?tmp#41##0:wybe.bool)
                    case ~tmp#41##0:wybe.bool of
                    0:
                        foreign llvm icmp_eq(tmp#28##0:wybe.int, 5:wybe.int, ?tmp#44##0:wybe.bool)
                        case ~tmp#44##0:wybe.bool of
                        0:
                            foreign llvm icmp_eq(tmp#28##0:wybe.int, 6:wybe.int, ?tmp#47##0:wybe.bool)
                            case ~tmp#47##0:wybe.bool of
                            0:
                                foreign llvm icmp_eq(~tmp#28##0:wybe.int, 7:wybe.int, ?tmp#50##0:wybe.bool)
                                case ~tmp#50##0:wybe.bool of
                                0:
                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                1:
                                    foreign lpvm access(#left##0:multictr2.t, -7:wybe.int, 24:wybe.int, 7:wybe.int, ?#left#f08_a##0:wybe.int) @multictr2:nn:nn
                                    foreign lpvm access(#left##0:multictr2.t, 1:wybe.int, 24:wybe.int, 7:wybe.int, ?#left#f08_b##0:wybe.int) @multictr2:nn:nn
                                    foreign lpvm access(~#left##0:multictr2.t, 9:wybe.int, 24:wybe.int, 7:wybe.int, ?#left#f08_c##0:wybe.float) @multictr2:nn:nn
                                    foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#52##0:wybe.int)
                                    foreign llvm icmp_eq(~tmp#52##0:wybe.int, 7:wybe.int, ?tmp#53##0:wybe.bool)
                                    case ~tmp#53##0:wybe.bool of
                                    0:
                                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                    1:
                                        foreign lpvm access(#right##0:multictr2.t, -7:wybe.int, 24:wybe.int, 7:wybe.int, ?#right#f08_a##0:wybe.int) @multictr2:nn:nn
                                        foreign lpvm access(#right##0:multictr2.t, 1:wybe.int, 24:wybe.int, 7:wybe.int, ?#right#f08_b##0:wybe.int) @multictr2:nn:nn
                                        foreign lpvm access(~#right##0:multictr2.t, 9:wybe.int, 24:wybe.int, 7:wybe.int, ?#right#f08_c##0:wybe.float) @multictr2:nn:nn
                                        foreign llvm icmp_eq(~#left#f08_a##0:wybe.int, ~#right#f08_a##0:wybe.int, ?tmp#16##0:wybe.bool) @int:nn:nn
                                        case ~tmp#16##0:wybe.bool of
                                        0:
                                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                        1:
                                            foreign llvm icmp_eq(~#left#f08_b##0:wybe.int, ~#right#f08_b##0:wybe.int, ?tmp#17##0:wybe.bool) @int:nn:nn
                                            case ~tmp#17##0:wybe.bool of
                                            0:
                                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                            1:
                                                foreign llvm fcmp_eq(~#left#f08_c##0:wybe.float, ~#right#f08_c##0:wybe.float, ?#success##0:wybe.bool) @float:nn:nn





                            1:
                                foreign lpvm access(~#left##0:multictr2.t, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?#left#f07##0:wybe.int) @multictr2:nn:nn
                                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#49##0:wybe.int)
                                foreign llvm icmp_eq(~tmp#49##0:wybe.int, 6:wybe.int, ?tmp#50##0:wybe.bool)
                                case ~tmp#50##0:wybe.bool of
                                0:
                                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                                1:
                                    foreign lpvm access(~#right##0:multictr2.t, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?#right#f07##0:wybe.int) @multictr2:nn:nn
                                    foreign llvm icmp_eq(~#left#f07##0:wybe.int, ~#right#f07##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



                        1:
                            foreign lpvm access(~#left##0:multictr2.t, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?#left#f06##0:wybe.int) @multictr2:nn:nn
                            foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#46##0:wybe.int)
                            foreign llvm icmp_eq(~tmp#46##0:wybe.int, 5:wybe.int, ?tmp#47##0:wybe.bool)
                            case ~tmp#47##0:wybe.bool of
                            0:
                                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                            1:
                                foreign lpvm access(~#right##0:multictr2.t, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?#right#f06##0:wybe.int) @multictr2:nn:nn
                                foreign llvm icmp_eq(~#left#f06##0:wybe.int, ~#right#f06##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



                    1:
                        foreign lpvm access(~#left##0:multictr2.t, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?#left#f05##0:wybe.int) @multictr2:nn:nn
                        foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#43##0:wybe.int)
                        foreign llvm icmp_eq(~tmp#43##0:wybe.int, 4:wybe.int, ?tmp#44##0:wybe.bool)
                        case ~tmp#44##0:wybe.bool of
                        0:
                            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                        1:
                            foreign lpvm access(~#right##0:multictr2.t, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?#right#f05##0:wybe.int) @multictr2:nn:nn
                            foreign llvm icmp_eq(~#left#f05##0:wybe.int, ~#right#f05##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



                1:
                    foreign lpvm access(~#left##0:multictr2.t, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?#left#f04##0:wybe.int) @multictr2:nn:nn
                    foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#40##0:wybe.int)
                    foreign llvm icmp_eq(~tmp#40##0:wybe.int, 3:wybe.int, ?tmp#41##0:wybe.bool)
                    case ~tmp#41##0:wybe.bool of
                    0:
                        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                    1:
                        foreign lpvm access(~#right##0:multictr2.t, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?#right#f04##0:wybe.int) @multictr2:nn:nn
                        foreign llvm icmp_eq(~#left#f04##0:wybe.int, ~#right#f04##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



            1:
                foreign lpvm access(~#left##0:multictr2.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#left#f03##0:wybe.int) @multictr2:nn:nn
                foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#37##0:wybe.int)
                foreign llvm icmp_eq(~tmp#37##0:wybe.int, 2:wybe.int, ?tmp#38##0:wybe.bool)
                case ~tmp#38##0:wybe.bool of
                0:
                    foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

                1:
                    foreign lpvm access(~#right##0:multictr2.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#right#f03##0:wybe.int) @multictr2:nn:nn
                    foreign llvm icmp_eq(~#left#f03##0:wybe.int, ~#right#f03##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



        1:
            foreign lpvm access(~#left##0:multictr2.t, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#left#f02##0:wybe.int) @multictr2:nn:nn
            foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#34##0:wybe.int)
            foreign llvm icmp_eq(~tmp#34##0:wybe.int, 1:wybe.int, ?tmp#35##0:wybe.bool)
            case ~tmp#35##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign lpvm access(~#right##0:multictr2.t, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#right#f02##0:wybe.int) @multictr2:nn:nn
                foreign llvm icmp_eq(~#left#f02##0:wybe.int, ~#right#f02##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



    1:
        foreign lpvm access(~#left##0:multictr2.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#left#f01##0:wybe.int) @multictr2:nn:nn
        foreign llvm and(#right##0:wybe.int, 7:wybe.int, ?tmp#31##0:wybe.int)
        foreign llvm icmp_eq(~tmp#31##0:wybe.int, 0:wybe.int, ?tmp#32##0:wybe.bool)
        case ~tmp#32##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(~#right##0:multictr2.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#right#f01##0:wybe.int) @multictr2:nn:nn
            foreign llvm icmp_eq(~#left#f01##0:wybe.int, ~#right#f01##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn




c01 > public {inline} (0 calls)
0: multictr2.t.c01<0>
c01(f01##0:wybe.int, ?#result##0:multictr2.t)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr2.t) @multictr2:nn:nn
    foreign lpvm mutate(~#rec##0:multictr2.t, ?#result##0:multictr2.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f01##0:wybe.int) @multictr2:nn:nn
c01 > public {inline} (24 calls)
1: multictr2.t.c01<1>
c01(?f01##0:wybe.int, #result##0:multictr2.t, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f01##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:multictr2.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?f01##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



c02 > public {inline} (0 calls)
0: multictr2.t.c02<0>
c02(f02##0:wybe.int, ?#result##0:multictr2.t)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr2.t) @multictr2:nn:nn
    foreign lpvm mutate(~#rec##0:multictr2.t, ?#rec##1:multictr2.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f02##0:wybe.int) @multictr2:nn:nn
    foreign llvm or(~#rec##1:multictr2.t, 1:wybe.int, ?#result##0:multictr2.t) @multictr2:nn:nn
c02 > public {inline} (19 calls)
1: multictr2.t.c02<1>
c02(?f02##0:wybe.int, #result##0:multictr2.t, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f02##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:multictr2.t, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?f02##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



c03 > public {inline} (0 calls)
0: multictr2.t.c03<0>
c03(f03##0:wybe.int, ?#result##0:multictr2.t)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr2.t) @multictr2:nn:nn
    foreign lpvm mutate(~#rec##0:multictr2.t, ?#rec##1:multictr2.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f03##0:wybe.int) @multictr2:nn:nn
    foreign llvm or(~#rec##1:multictr2.t, 2:wybe.int, ?#result##0:multictr2.t) @multictr2:nn:nn
c03 > public {inline} (17 calls)
1: multictr2.t.c03<1>
c03(?f03##0:wybe.int, #result##0:multictr2.t, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f03##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:multictr2.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?f03##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



c04 > public {inline} (0 calls)
0: multictr2.t.c04<0>
c04(f04##0:wybe.int, ?#result##0:multictr2.t)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr2.t) @multictr2:nn:nn
    foreign lpvm mutate(~#rec##0:multictr2.t, ?#rec##1:multictr2.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f04##0:wybe.int) @multictr2:nn:nn
    foreign llvm or(~#rec##1:multictr2.t, 3:wybe.int, ?#result##0:multictr2.t) @multictr2:nn:nn
c04 > public {inline} (15 calls)
1: multictr2.t.c04<1>
c04(?f04##0:wybe.int, #result##0:multictr2.t, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 3:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f04##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:multictr2.t, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?f04##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



c05 > public {inline} (0 calls)
0: multictr2.t.c05<0>
c05(f05##0:wybe.int, ?#result##0:multictr2.t)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr2.t) @multictr2:nn:nn
    foreign lpvm mutate(~#rec##0:multictr2.t, ?#rec##1:multictr2.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f05##0:wybe.int) @multictr2:nn:nn
    foreign llvm or(~#rec##1:multictr2.t, 4:wybe.int, ?#result##0:multictr2.t) @multictr2:nn:nn
c05 > public {inline} (13 calls)
1: multictr2.t.c05<1>
c05(?f05##0:wybe.int, #result##0:multictr2.t, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f05##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:multictr2.t, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?f05##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



c06 > public {inline} (0 calls)
0: multictr2.t.c06<0>
c06(f06##0:wybe.int, ?#result##0:multictr2.t)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr2.t) @multictr2:nn:nn
    foreign lpvm mutate(~#rec##0:multictr2.t, ?#rec##1:multictr2.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f06##0:wybe.int) @multictr2:nn:nn
    foreign llvm or(~#rec##1:multictr2.t, 5:wybe.int, ?#result##0:multictr2.t) @multictr2:nn:nn
c06 > public {inline} (11 calls)
1: multictr2.t.c06<1>
c06(?f06##0:wybe.int, #result##0:multictr2.t, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 5:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f06##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:multictr2.t, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?f06##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



c07 > public {inline} (0 calls)
0: multictr2.t.c07<0>
c07(f07##0:wybe.int, ?#result##0:multictr2.t)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(8:wybe.int, ?#rec##0:multictr2.t) @multictr2:nn:nn
    foreign lpvm mutate(~#rec##0:multictr2.t, ?#rec##1:multictr2.t, 0:wybe.int, 1:wybe.int, 8:wybe.int, 0:wybe.int, ~f07##0:wybe.int) @multictr2:nn:nn
    foreign llvm or(~#rec##1:multictr2.t, 6:wybe.int, ?#result##0:multictr2.t) @multictr2:nn:nn
c07 > public {inline} (9 calls)
1: multictr2.t.c07<1>
c07(?f07##0:wybe.int, #result##0:multictr2.t, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 6:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f07##0:wybe.int)

    1:
        foreign lpvm access(~#result##0:multictr2.t, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?f07##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



c08 > public {inline} (0 calls)
0: multictr2.t.c08<0>
c08(f08_a##0:wybe.int, f08_b##0:wybe.int, f08_c##0:wybe.float, ?#result##0:multictr2.t)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(24:wybe.int, ?#rec##0:multictr2.t) @multictr2:nn:nn
    foreign lpvm mutate(~#rec##0:multictr2.t, ?#rec##1:multictr2.t, 0:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~f08_a##0:wybe.int) @multictr2:nn:nn
    foreign lpvm mutate(~#rec##1:multictr2.t, ?#rec##2:multictr2.t, 8:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~f08_b##0:wybe.int) @multictr2:nn:nn
    foreign lpvm mutate(~#rec##2:multictr2.t, ?#rec##3:multictr2.t, 16:wybe.int, 1:wybe.int, 24:wybe.int, 0:wybe.int, ~f08_c##0:wybe.float) @multictr2:nn:nn
    foreign llvm or(~#rec##3:multictr2.t, 7:wybe.int, ?#result##0:multictr2.t) @multictr2:nn:nn
c08 > public {inline} (9 calls)
1: multictr2.t.c08<1>
c08(?f08_a##0:wybe.int, ?f08_b##0:wybe.int, ?f08_c##0:wybe.float, #result##0:multictr2.t, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#result##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 7:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?f08_a##0:wybe.int)
        foreign llvm move(undef:wybe.int, ?f08_b##0:wybe.int)
        foreign llvm move(undef:wybe.float, ?f08_c##0:wybe.float)

    1:
        foreign lpvm access(#result##0:multictr2.t, -7:wybe.int, 24:wybe.int, 7:wybe.int, ?f08_a##0:wybe.int) @multictr2:nn:nn
        foreign lpvm access(#result##0:multictr2.t, 1:wybe.int, 24:wybe.int, 7:wybe.int, ?f08_b##0:wybe.int) @multictr2:nn:nn
        foreign lpvm access(~#result##0:multictr2.t, 9:wybe.int, 24:wybe.int, 7:wybe.int, ?f08_c##0:wybe.float) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f01 > public {inline} (0 calls)
0: multictr2.t.f01<0>
f01(#rec##0:multictr2.t, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:multictr2.t, 0:wybe.int, 8:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

f01 > public {inline} (0 calls)
1: multictr2.t.f01<1>
f01(#rec##0:multictr2.t, ?#rec##1:multictr2.t, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr2.t, ?#rec##1:multictr2.t)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr2.t, ?#rec##1:multictr2.t, 0:wybe.int, 0:wybe.int, 8:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f02 > public {inline} (0 calls)
0: multictr2.t.f02<0>
f02(#rec##0:multictr2.t, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:multictr2.t, -1:wybe.int, 8:wybe.int, 1:wybe.int, ?#result##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

f02 > public {inline} (0 calls)
1: multictr2.t.f02<1>
f02(#rec##0:multictr2.t, ?#rec##1:multictr2.t, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 1:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr2.t, ?#rec##1:multictr2.t)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr2.t, ?#rec##1:multictr2.t, -1:wybe.int, 0:wybe.int, 8:wybe.int, 1:wybe.int, ~#field##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f03 > public {inline} (0 calls)
0: multictr2.t.f03<0>
f03(#rec##0:multictr2.t, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:multictr2.t, -2:wybe.int, 8:wybe.int, 2:wybe.int, ?#result##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

f03 > public {inline} (0 calls)
1: multictr2.t.f03<1>
f03(#rec##0:multictr2.t, ?#rec##1:multictr2.t, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 2:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr2.t, ?#rec##1:multictr2.t)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr2.t, ?#rec##1:multictr2.t, -2:wybe.int, 0:wybe.int, 8:wybe.int, 2:wybe.int, ~#field##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f04 > public {inline} (0 calls)
0: multictr2.t.f04<0>
f04(#rec##0:multictr2.t, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 3:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:multictr2.t, -3:wybe.int, 8:wybe.int, 3:wybe.int, ?#result##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

f04 > public {inline} (0 calls)
1: multictr2.t.f04<1>
f04(#rec##0:multictr2.t, ?#rec##1:multictr2.t, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 3:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr2.t, ?#rec##1:multictr2.t)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr2.t, ?#rec##1:multictr2.t, -3:wybe.int, 0:wybe.int, 8:wybe.int, 3:wybe.int, ~#field##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f05 > public {inline} (0 calls)
0: multictr2.t.f05<0>
f05(#rec##0:multictr2.t, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:multictr2.t, -4:wybe.int, 8:wybe.int, 4:wybe.int, ?#result##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

f05 > public {inline} (0 calls)
1: multictr2.t.f05<1>
f05(#rec##0:multictr2.t, ?#rec##1:multictr2.t, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 4:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr2.t, ?#rec##1:multictr2.t)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr2.t, ?#rec##1:multictr2.t, -4:wybe.int, 0:wybe.int, 8:wybe.int, 4:wybe.int, ~#field##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f06 > public {inline} (0 calls)
0: multictr2.t.f06<0>
f06(#rec##0:multictr2.t, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 5:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:multictr2.t, -5:wybe.int, 8:wybe.int, 5:wybe.int, ?#result##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

f06 > public {inline} (0 calls)
1: multictr2.t.f06<1>
f06(#rec##0:multictr2.t, ?#rec##1:multictr2.t, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 5:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr2.t, ?#rec##1:multictr2.t)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr2.t, ?#rec##1:multictr2.t, -5:wybe.int, 0:wybe.int, 8:wybe.int, 5:wybe.int, ~#field##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f07 > public {inline} (0 calls)
0: multictr2.t.f07<0>
f07(#rec##0:multictr2.t, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 6:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:multictr2.t, -6:wybe.int, 8:wybe.int, 6:wybe.int, ?#result##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

f07 > public {inline} (0 calls)
1: multictr2.t.f07<1>
f07(#rec##0:multictr2.t, ?#rec##1:multictr2.t, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 6:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr2.t, ?#rec##1:multictr2.t)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr2.t, ?#rec##1:multictr2.t, -6:wybe.int, 0:wybe.int, 8:wybe.int, 6:wybe.int, ~#field##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f08_a > public {inline} (0 calls)
0: multictr2.t.f08_a<0>
f08_a(#rec##0:multictr2.t, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 7:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:multictr2.t, -7:wybe.int, 24:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

f08_a > public {inline} (0 calls)
1: multictr2.t.f08_a<1>
f08_a(#rec##0:multictr2.t, ?#rec##1:multictr2.t, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 7:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr2.t, ?#rec##1:multictr2.t)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr2.t, ?#rec##1:multictr2.t, -7:wybe.int, 0:wybe.int, 24:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f08_b > public {inline} (0 calls)
0: multictr2.t.f08_b<0>
f08_b(#rec##0:multictr2.t, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 7:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:multictr2.t, 1:wybe.int, 24:wybe.int, 7:wybe.int, ?#result##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

f08_b > public {inline} (0 calls)
1: multictr2.t.f08_b<1>
f08_b(#rec##0:multictr2.t, ?#rec##1:multictr2.t, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 7:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr2.t, ?#rec##1:multictr2.t)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr2.t, ?#rec##1:multictr2.t, 1:wybe.int, 0:wybe.int, 24:wybe.int, 7:wybe.int, ~#field##0:wybe.int) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



f08_c > public {inline} (0 calls)
0: multictr2.t.f08_c<0>
f08_c(#rec##0:multictr2.t, ?#result##0:wybe.float, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 7:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.float, ?#result##0:wybe.float)

    1:
        foreign lpvm access(~#rec##0:multictr2.t, 9:wybe.int, 24:wybe.int, 7:wybe.int, ?#result##0:wybe.float) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

f08_c > public {inline} (0 calls)
1: multictr2.t.f08_c<1>
f08_c(#rec##0:multictr2.t, ?#rec##1:multictr2.t, #field##0:wybe.float, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm and(#rec##0:wybe.int, 7:wybe.int, ?tmp#1##0:wybe.int)
    foreign llvm icmp_eq(~tmp#1##0:wybe.int, 7:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:multictr2.t, ?#rec##1:multictr2.t)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:multictr2.t, ?#rec##1:multictr2.t, 9:wybe.int, 0:wybe.int, 24:wybe.int, 7:wybe.int, ~#field##0:wybe.float) @multictr2:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: multictr2.t.~=<0>
~=(#left##0:multictr2.t, #right##0:multictr2.t, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    multictr2.t.=<0>(~#left##0:multictr2.t, ~#right##0:multictr2.t, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'multictr2.t'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"multictr2.t.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %"1#tmp#28##0" = and i64 %"#left##0", 7 
  %"1#tmp#29##0" = icmp eq i64 %"1#tmp#28##0", 0 
  br i1 %"1#tmp#29##0", label %if.then, label %if.else 
if.then:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %"2#tmp#31##0" = and i64 %"#right##0", 7 
  %"2#tmp#32##0" = icmp eq i64 %"2#tmp#31##0", 0 
  br i1 %"2#tmp#32##0", label %if.then1, label %if.else1 
if.else:
  %"3#tmp#32##0" = icmp eq i64 %"1#tmp#28##0", 1 
  br i1 %"3#tmp#32##0", label %if.then2, label %if.else2 
if.then1:
  %3 = inttoptr i64 %"#right##0" to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  %"4##success##0" = icmp eq i64 %2, %5 
  ret i1 %"4##success##0" 
if.else1:
  ret i1 0 
if.then2:
  %6 = add   i64 %"#left##0", -1 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %"6#tmp#34##0" = and i64 %"#right##0", 7 
  %"6#tmp#35##0" = icmp eq i64 %"6#tmp#34##0", 1 
  br i1 %"6#tmp#35##0", label %if.then3, label %if.else3 
if.else2:
  %"7#tmp#35##0" = icmp eq i64 %"1#tmp#28##0", 2 
  br i1 %"7#tmp#35##0", label %if.then4, label %if.else4 
if.then3:
  %10 = add   i64 %"#right##0", -1 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %"8##success##0" = icmp eq i64 %9, %13 
  ret i1 %"8##success##0" 
if.else3:
  ret i1 0 
if.then4:
  %14 = add   i64 %"#left##0", -2 
  %15 = inttoptr i64 %14 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  %17 = load  i64, i64* %16 
  %"10#tmp#37##0" = and i64 %"#right##0", 7 
  %"10#tmp#38##0" = icmp eq i64 %"10#tmp#37##0", 2 
  br i1 %"10#tmp#38##0", label %if.then5, label %if.else5 
if.else4:
  %"11#tmp#38##0" = icmp eq i64 %"1#tmp#28##0", 3 
  br i1 %"11#tmp#38##0", label %if.then6, label %if.else6 
if.then5:
  %18 = add   i64 %"#right##0", -2 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  %21 = load  i64, i64* %20 
  %"12##success##0" = icmp eq i64 %17, %21 
  ret i1 %"12##success##0" 
if.else5:
  ret i1 0 
if.then6:
  %22 = add   i64 %"#left##0", -3 
  %23 = inttoptr i64 %22 to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  %25 = load  i64, i64* %24 
  %"14#tmp#40##0" = and i64 %"#right##0", 7 
  %"14#tmp#41##0" = icmp eq i64 %"14#tmp#40##0", 3 
  br i1 %"14#tmp#41##0", label %if.then7, label %if.else7 
if.else6:
  %"15#tmp#41##0" = icmp eq i64 %"1#tmp#28##0", 4 
  br i1 %"15#tmp#41##0", label %if.then8, label %if.else8 
if.then7:
  %26 = add   i64 %"#right##0", -3 
  %27 = inttoptr i64 %26 to i64* 
  %28 = getelementptr  i64, i64* %27, i64 0 
  %29 = load  i64, i64* %28 
  %"16##success##0" = icmp eq i64 %25, %29 
  ret i1 %"16##success##0" 
if.else7:
  ret i1 0 
if.then8:
  %30 = add   i64 %"#left##0", -4 
  %31 = inttoptr i64 %30 to i64* 
  %32 = getelementptr  i64, i64* %31, i64 0 
  %33 = load  i64, i64* %32 
  %"18#tmp#43##0" = and i64 %"#right##0", 7 
  %"18#tmp#44##0" = icmp eq i64 %"18#tmp#43##0", 4 
  br i1 %"18#tmp#44##0", label %if.then9, label %if.else9 
if.else8:
  %"19#tmp#44##0" = icmp eq i64 %"1#tmp#28##0", 5 
  br i1 %"19#tmp#44##0", label %if.then10, label %if.else10 
if.then9:
  %34 = add   i64 %"#right##0", -4 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  %37 = load  i64, i64* %36 
  %"20##success##0" = icmp eq i64 %33, %37 
  ret i1 %"20##success##0" 
if.else9:
  ret i1 0 
if.then10:
  %38 = add   i64 %"#left##0", -5 
  %39 = inttoptr i64 %38 to i64* 
  %40 = getelementptr  i64, i64* %39, i64 0 
  %41 = load  i64, i64* %40 
  %"22#tmp#46##0" = and i64 %"#right##0", 7 
  %"22#tmp#47##0" = icmp eq i64 %"22#tmp#46##0", 5 
  br i1 %"22#tmp#47##0", label %if.then11, label %if.else11 
if.else10:
  %"23#tmp#47##0" = icmp eq i64 %"1#tmp#28##0", 6 
  br i1 %"23#tmp#47##0", label %if.then12, label %if.else12 
if.then11:
  %42 = add   i64 %"#right##0", -5 
  %43 = inttoptr i64 %42 to i64* 
  %44 = getelementptr  i64, i64* %43, i64 0 
  %45 = load  i64, i64* %44 
  %"24##success##0" = icmp eq i64 %41, %45 
  ret i1 %"24##success##0" 
if.else11:
  ret i1 0 
if.then12:
  %46 = add   i64 %"#left##0", -6 
  %47 = inttoptr i64 %46 to i64* 
  %48 = getelementptr  i64, i64* %47, i64 0 
  %49 = load  i64, i64* %48 
  %"26#tmp#49##0" = and i64 %"#right##0", 7 
  %"26#tmp#50##0" = icmp eq i64 %"26#tmp#49##0", 6 
  br i1 %"26#tmp#50##0", label %if.then13, label %if.else13 
if.else12:
  %"27#tmp#50##0" = icmp eq i64 %"1#tmp#28##0", 7 
  br i1 %"27#tmp#50##0", label %if.then14, label %if.else14 
if.then13:
  %50 = add   i64 %"#right##0", -6 
  %51 = inttoptr i64 %50 to i64* 
  %52 = getelementptr  i64, i64* %51, i64 0 
  %53 = load  i64, i64* %52 
  %"28##success##0" = icmp eq i64 %49, %53 
  ret i1 %"28##success##0" 
if.else13:
  ret i1 0 
if.then14:
  %54 = add   i64 %"#left##0", -7 
  %55 = inttoptr i64 %54 to i64* 
  %56 = getelementptr  i64, i64* %55, i64 0 
  %57 = load  i64, i64* %56 
  %58 = add   i64 %"#left##0", 1 
  %59 = inttoptr i64 %58 to i64* 
  %60 = getelementptr  i64, i64* %59, i64 0 
  %61 = load  i64, i64* %60 
  %62 = add   i64 %"#left##0", 9 
  %63 = inttoptr i64 %62 to double* 
  %64 = getelementptr  double, double* %63, i64 0 
  %65 = load  double, double* %64 
  %"30#tmp#52##0" = and i64 %"#right##0", 7 
  %"30#tmp#53##0" = icmp eq i64 %"30#tmp#52##0", 7 
  br i1 %"30#tmp#53##0", label %if.then15, label %if.else15 
if.else14:
  ret i1 0 
if.then15:
  %66 = add   i64 %"#right##0", -7 
  %67 = inttoptr i64 %66 to i64* 
  %68 = getelementptr  i64, i64* %67, i64 0 
  %69 = load  i64, i64* %68 
  %70 = add   i64 %"#right##0", 1 
  %71 = inttoptr i64 %70 to i64* 
  %72 = getelementptr  i64, i64* %71, i64 0 
  %73 = load  i64, i64* %72 
  %74 = add   i64 %"#right##0", 9 
  %75 = inttoptr i64 %74 to double* 
  %76 = getelementptr  double, double* %75, i64 0 
  %77 = load  double, double* %76 
  %"32#tmp#16##0" = icmp eq i64 %57, %69 
  br i1 %"32#tmp#16##0", label %if.then16, label %if.else16 
if.else15:
  ret i1 0 
if.then16:
  %"34#tmp#17##0" = icmp eq i64 %61, %73 
  br i1 %"34#tmp#17##0", label %if.then17, label %if.else17 
if.else16:
  ret i1 0 
if.then17:
  %"36##success##0" = fcmp oeq double %65, %77 
  ret i1 %"36##success##0" 
if.else17:
  ret i1 0 
}


define external fastcc  i64 @"multictr2.t.c01<0>"(i64  %"f01##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"f01##0", i64* %4 
  ret i64 %2 
}


define external fastcc  {i64, i1} @"multictr2.t.c01<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#result##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = inttoptr i64 %"#result##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = insertvalue {i64, i1} undef, i64 %2, 0 
  %4 = insertvalue {i64, i1} %3, i1 1, 1 
  ret {i64, i1} %4 
if.else:
  %5 = insertvalue {i64, i1} undef, i64 undef, 0 
  %6 = insertvalue {i64, i1} %5, i1 0, 1 
  ret {i64, i1} %6 
}


define external fastcc  i64 @"multictr2.t.c02<0>"(i64  %"f02##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"f02##0", i64* %4 
  %"1##result##0" = or i64 %2, 1 
  ret i64 %"1##result##0" 
}


define external fastcc  {i64, i1} @"multictr2.t.c02<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#result##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 1 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = add   i64 %"#result##0", -1 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  i64 @"multictr2.t.c03<0>"(i64  %"f03##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"f03##0", i64* %4 
  %"1##result##0" = or i64 %2, 2 
  ret i64 %"1##result##0" 
}


define external fastcc  {i64, i1} @"multictr2.t.c03<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#result##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 2 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = add   i64 %"#result##0", -2 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  i64 @"multictr2.t.c04<0>"(i64  %"f04##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"f04##0", i64* %4 
  %"1##result##0" = or i64 %2, 3 
  ret i64 %"1##result##0" 
}


define external fastcc  {i64, i1} @"multictr2.t.c04<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#result##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 3 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = add   i64 %"#result##0", -3 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  i64 @"multictr2.t.c05<0>"(i64  %"f05##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"f05##0", i64* %4 
  %"1##result##0" = or i64 %2, 4 
  ret i64 %"1##result##0" 
}


define external fastcc  {i64, i1} @"multictr2.t.c05<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#result##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 4 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = add   i64 %"#result##0", -4 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  i64 @"multictr2.t.c06<0>"(i64  %"f06##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"f06##0", i64* %4 
  %"1##result##0" = or i64 %2, 5 
  ret i64 %"1##result##0" 
}


define external fastcc  {i64, i1} @"multictr2.t.c06<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#result##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 5 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = add   i64 %"#result##0", -5 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  i64 @"multictr2.t.c07<0>"(i64  %"f07##0")    {
entry:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"f07##0", i64* %4 
  %"1##result##0" = or i64 %2, 6 
  ret i64 %"1##result##0" 
}


define external fastcc  {i64, i1} @"multictr2.t.c07<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#result##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 6 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = add   i64 %"#result##0", -6 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  i64 @"multictr2.t.c08<0>"(i64  %"f08_a##0", i64  %"f08_b##0", double  %"f08_c##0")    {
entry:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"f08_a##0", i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"f08_b##0", i64* %7 
  %8 = add   i64 %2, 16 
  %9 = inttoptr i64 %8 to double* 
  %10 = getelementptr  double, double* %9, i64 0 
  store  double %"f08_c##0", double* %10 
  %"1##result##0" = or i64 %2, 7 
  ret i64 %"1##result##0" 
}


define external fastcc  {i64, i64, double, i1} @"multictr2.t.c08<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#result##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 7 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = add   i64 %"#result##0", -7 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = add   i64 %"#result##0", 1 
  %5 = inttoptr i64 %4 to i64* 
  %6 = getelementptr  i64, i64* %5, i64 0 
  %7 = load  i64, i64* %6 
  %8 = add   i64 %"#result##0", 9 
  %9 = inttoptr i64 %8 to double* 
  %10 = getelementptr  double, double* %9, i64 0 
  %11 = load  double, double* %10 
  %12 = insertvalue {i64, i64, double, i1} undef, i64 %3, 0 
  %13 = insertvalue {i64, i64, double, i1} %12, i64 %7, 1 
  %14 = insertvalue {i64, i64, double, i1} %13, double %11, 2 
  %15 = insertvalue {i64, i64, double, i1} %14, i1 1, 3 
  ret {i64, i64, double, i1} %15 
if.else:
  %16 = insertvalue {i64, i64, double, i1} undef, i64 undef, 0 
  %17 = insertvalue {i64, i64, double, i1} %16, i64 undef, 1 
  %18 = insertvalue {i64, i64, double, i1} %17, double undef, 2 
  %19 = insertvalue {i64, i64, double, i1} %18, i1 0, 3 
  ret {i64, i64, double, i1} %19 
}


define external fastcc  {i64, i1} @"multictr2.t.f01<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = inttoptr i64 %"#rec##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = insertvalue {i64, i1} undef, i64 %2, 0 
  %4 = insertvalue {i64, i1} %3, i1 1, 1 
  ret {i64, i1} %4 
if.else:
  %5 = insertvalue {i64, i1} undef, i64 undef, 0 
  %6 = insertvalue {i64, i1} %5, i1 0, 1 
  ret {i64, i1} %6 
}


define external fastcc  {i64, i1} @"multictr2.t.f01<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = inttoptr i64 %2 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"#field##0", i64* %7 
  %8 = insertvalue {i64, i1} undef, i64 %2, 0 
  %9 = insertvalue {i64, i1} %8, i1 1, 1 
  ret {i64, i1} %9 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
}


define external fastcc  {i64, i1} @"multictr2.t.f02<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 1 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = add   i64 %"#rec##0", -1 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"multictr2.t.f02<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 1 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = add   i64 %2, 1 
  %4 = sub   i64 %"#rec##0", 1 
  %5 = inttoptr i64 %2 to i8* 
  %6 = inttoptr i64 %4 to i8* 
  %7 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %5, i8*  %6, i32  %7, i1  0)  
  %8 = add   i64 %3, -1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %"#field##0", i64* %10 
  %11 = insertvalue {i64, i1} undef, i64 %3, 0 
  %12 = insertvalue {i64, i1} %11, i1 1, 1 
  ret {i64, i1} %12 
if.else:
  %13 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %14 = insertvalue {i64, i1} %13, i1 0, 1 
  ret {i64, i1} %14 
}


define external fastcc  {i64, i1} @"multictr2.t.f03<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 2 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = add   i64 %"#rec##0", -2 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"multictr2.t.f03<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 2 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = add   i64 %2, 2 
  %4 = sub   i64 %"#rec##0", 2 
  %5 = inttoptr i64 %2 to i8* 
  %6 = inttoptr i64 %4 to i8* 
  %7 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %5, i8*  %6, i32  %7, i1  0)  
  %8 = add   i64 %3, -2 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %"#field##0", i64* %10 
  %11 = insertvalue {i64, i1} undef, i64 %3, 0 
  %12 = insertvalue {i64, i1} %11, i1 1, 1 
  ret {i64, i1} %12 
if.else:
  %13 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %14 = insertvalue {i64, i1} %13, i1 0, 1 
  ret {i64, i1} %14 
}


define external fastcc  {i64, i1} @"multictr2.t.f04<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 3 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = add   i64 %"#rec##0", -3 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"multictr2.t.f04<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 3 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = add   i64 %2, 3 
  %4 = sub   i64 %"#rec##0", 3 
  %5 = inttoptr i64 %2 to i8* 
  %6 = inttoptr i64 %4 to i8* 
  %7 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %5, i8*  %6, i32  %7, i1  0)  
  %8 = add   i64 %3, -3 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %"#field##0", i64* %10 
  %11 = insertvalue {i64, i1} undef, i64 %3, 0 
  %12 = insertvalue {i64, i1} %11, i1 1, 1 
  ret {i64, i1} %12 
if.else:
  %13 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %14 = insertvalue {i64, i1} %13, i1 0, 1 
  ret {i64, i1} %14 
}


define external fastcc  {i64, i1} @"multictr2.t.f05<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 4 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = add   i64 %"#rec##0", -4 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"multictr2.t.f05<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 4 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = add   i64 %2, 4 
  %4 = sub   i64 %"#rec##0", 4 
  %5 = inttoptr i64 %2 to i8* 
  %6 = inttoptr i64 %4 to i8* 
  %7 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %5, i8*  %6, i32  %7, i1  0)  
  %8 = add   i64 %3, -4 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %"#field##0", i64* %10 
  %11 = insertvalue {i64, i1} undef, i64 %3, 0 
  %12 = insertvalue {i64, i1} %11, i1 1, 1 
  ret {i64, i1} %12 
if.else:
  %13 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %14 = insertvalue {i64, i1} %13, i1 0, 1 
  ret {i64, i1} %14 
}


define external fastcc  {i64, i1} @"multictr2.t.f06<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 5 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = add   i64 %"#rec##0", -5 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"multictr2.t.f06<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 5 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = add   i64 %2, 5 
  %4 = sub   i64 %"#rec##0", 5 
  %5 = inttoptr i64 %2 to i8* 
  %6 = inttoptr i64 %4 to i8* 
  %7 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %5, i8*  %6, i32  %7, i1  0)  
  %8 = add   i64 %3, -5 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %"#field##0", i64* %10 
  %11 = insertvalue {i64, i1} undef, i64 %3, 0 
  %12 = insertvalue {i64, i1} %11, i1 1, 1 
  ret {i64, i1} %12 
if.else:
  %13 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %14 = insertvalue {i64, i1} %13, i1 0, 1 
  ret {i64, i1} %14 
}


define external fastcc  {i64, i1} @"multictr2.t.f07<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 6 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = add   i64 %"#rec##0", -6 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"multictr2.t.f07<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 6 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = trunc i64 8 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = add   i64 %2, 6 
  %4 = sub   i64 %"#rec##0", 6 
  %5 = inttoptr i64 %2 to i8* 
  %6 = inttoptr i64 %4 to i8* 
  %7 = trunc i64 8 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %5, i8*  %6, i32  %7, i1  0)  
  %8 = add   i64 %3, -6 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %"#field##0", i64* %10 
  %11 = insertvalue {i64, i1} undef, i64 %3, 0 
  %12 = insertvalue {i64, i1} %11, i1 1, 1 
  ret {i64, i1} %12 
if.else:
  %13 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %14 = insertvalue {i64, i1} %13, i1 0, 1 
  ret {i64, i1} %14 
}


define external fastcc  {i64, i1} @"multictr2.t.f08_a<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 7 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = add   i64 %"#rec##0", -7 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"multictr2.t.f08_a<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 7 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = add   i64 %2, 7 
  %4 = sub   i64 %"#rec##0", 7 
  %5 = inttoptr i64 %2 to i8* 
  %6 = inttoptr i64 %4 to i8* 
  %7 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %5, i8*  %6, i32  %7, i1  0)  
  %8 = add   i64 %3, -7 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %"#field##0", i64* %10 
  %11 = insertvalue {i64, i1} undef, i64 %3, 0 
  %12 = insertvalue {i64, i1} %11, i1 1, 1 
  ret {i64, i1} %12 
if.else:
  %13 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %14 = insertvalue {i64, i1} %13, i1 0, 1 
  ret {i64, i1} %14 
}


define external fastcc  {i64, i1} @"multictr2.t.f08_b<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 7 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = add   i64 %"#rec##0", 1 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"multictr2.t.f08_b<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 7 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = add   i64 %2, 7 
  %4 = sub   i64 %"#rec##0", 7 
  %5 = inttoptr i64 %2 to i8* 
  %6 = inttoptr i64 %4 to i8* 
  %7 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %5, i8*  %6, i32  %7, i1  0)  
  %8 = add   i64 %3, 1 
  %9 = inttoptr i64 %8 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  store  i64 %"#field##0", i64* %10 
  %11 = insertvalue {i64, i1} undef, i64 %3, 0 
  %12 = insertvalue {i64, i1} %11, i1 1, 1 
  ret {i64, i1} %12 
if.else:
  %13 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %14 = insertvalue {i64, i1} %13, i1 0, 1 
  ret {i64, i1} %14 
}


define external fastcc  {double, i1} @"multictr2.t.f08_c<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 7 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = add   i64 %"#rec##0", 9 
  %1 = inttoptr i64 %0 to double* 
  %2 = getelementptr  double, double* %1, i64 0 
  %3 = load  double, double* %2 
  %4 = insertvalue {double, i1} undef, double %3, 0 
  %5 = insertvalue {double, i1} %4, i1 1, 1 
  ret {double, i1} %5 
if.else:
  %6 = insertvalue {double, i1} undef, double undef, 0 
  %7 = insertvalue {double, i1} %6, i1 0, 1 
  ret {double, i1} %7 
}


define external fastcc  {i64, i1} @"multictr2.t.f08_c<1>"(i64  %"#rec##0", double  %"#field##0")    {
entry:
  %"1#tmp#1##0" = and i64 %"#rec##0", 7 
  %"1#tmp#0##0" = icmp eq i64 %"1#tmp#1##0", 7 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = trunc i64 24 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = add   i64 %2, 7 
  %4 = sub   i64 %"#rec##0", 7 
  %5 = inttoptr i64 %2 to i8* 
  %6 = inttoptr i64 %4 to i8* 
  %7 = trunc i64 24 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %5, i8*  %6, i32  %7, i1  0)  
  %8 = add   i64 %3, 9 
  %9 = inttoptr i64 %8 to double* 
  %10 = getelementptr  double, double* %9, i64 0 
  store  double %"#field##0", double* %10 
  %11 = insertvalue {i64, i1} undef, i64 %3, 0 
  %12 = insertvalue {i64, i1} %11, i1 1, 1 
  ret {i64, i1} %12 
if.else:
  %13 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %14 = insertvalue {i64, i1} %13, i1 0, 1 
  ret {i64, i1} %14 
}


define external fastcc  i1 @"multictr2.t.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %"1#tmp#0##0" = tail call fastcc  i1  @"multictr2.t.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %"1##success##0" = xor i1 %"1#tmp#0##0", 1 
  ret i1 %"1##success##0" 
}
