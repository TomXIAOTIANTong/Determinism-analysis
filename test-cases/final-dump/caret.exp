======================================================================
AFTER EVERYTHING:
 Module caret
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : caret.<0>
                    caret.expand_region<0>
  imports         : use caret.region
                    use position
                    use wybe
  resources       : 
  submodules      : caret.region
  procs           : 

module top-level code > public {impure} (0 calls)
0: caret.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
  MultiSpeczDepInfo: [(8,(caret.gen#1<0>,fromList [NonAliasedParamCond 0 []]))]
    foreign lpvm alloc(16:wybe.int, ?tmp#14##0:position.position) @position:nn:nn
    foreign lpvm mutate(~tmp#14##0:position.position, ?tmp#15##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~tmp#15##0:position.position, ?tmp#1##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int) @position:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#18##0:position.position) @position:nn:nn
    foreign lpvm mutate(~tmp#18##0:position.position, ?tmp#19##0:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 10:wybe.int) @position:nn:nn
    foreign lpvm mutate(~tmp#19##0:position.position, ?tmp#2##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 12:wybe.int) @position:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#22##0:caret.region) @caret:nn:nn
    foreign lpvm mutate(~tmp#22##0:caret.region, ?tmp#23##0:caret.region, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:position.position) @caret:nn:nn
    foreign lpvm mutate(~tmp#23##0:caret.region, ?tmp#24##0:caret.region, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, tmp#2##0:position.position) @caret:nn:nn
    foreign lpvm access(~tmp#2##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?ten##0:wybe.int) @position:nn:nn
    wybe.string.print<0>("ten = ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #6 @caret:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#30##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~ten##0:wybe.int, ~tmp#30##0:wybe.phantom, ?tmp#31##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#31##0:wybe.phantom, ?tmp#32##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#32##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
    caret.gen#1<0>[410bae77d3](~tmp#24##0:caret.region, _:caret.region, _:position.position, _:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #8


expand_region > public (0 calls)
0: caret.expand_region<0>
expand_region(reg##0:caret.region, ?reg##4:caret.region, point##0:position.position)<{}; {}>:
  AliasPairs: [(reg##0,reg##4)]
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign lpvm access(reg##0:caret.region, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:position.position) @caret:nn:nn
    foreign lpvm access(tmp#0##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.int) @position:nn:nn
    foreign lpvm access(point##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @position:nn:nn
    wybe.int.min<0>(~tmp#2##0:wybe.int, tmp#4##0:wybe.int, ?tmp#1##0:wybe.int) #4 @caret:nn:nn
    foreign lpvm {noalias} mutate(~tmp#0##0:position.position, ?tmp#0##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#1##0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~reg##0:caret.region, ?reg##1:caret.region, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, tmp#0##1:position.position) @caret:nn:nn
    foreign lpvm access(tmp#0##1:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @position:nn:nn
    foreign lpvm access(~point##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.int) @position:nn:nn
    wybe.int.min<0>(~tmp#7##0:wybe.int, tmp#9##0:wybe.int, ?tmp#6##0:wybe.int) #11 @caret:nn:nn
    foreign lpvm {noalias} mutate(~tmp#0##1:position.position, ?tmp#5##1:position.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#6##0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~reg##1:caret.region, ?reg##2:caret.region, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##1:position.position) @caret:nn:nn
    foreign lpvm access(reg##2:caret.region, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#10##0:position.position) @caret:nn:nn
    foreign lpvm access(tmp#10##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#12##0:wybe.int) @position:nn:nn
    wybe.int.max<0>(~tmp#12##0:wybe.int, ~tmp#4##0:wybe.int, ?tmp#11##0:wybe.int) #18 @caret:nn:nn
    foreign lpvm {noalias} mutate(~tmp#10##0:position.position, ?tmp#10##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#11##0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~reg##2:caret.region, ?reg##3:caret.region, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, tmp#10##1:position.position) @caret:nn:nn
    foreign lpvm access(tmp#10##1:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#17##0:wybe.int) @position:nn:nn
    wybe.int.max<0>(~tmp#17##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#16##0:wybe.int) #25 @caret:nn:nn
    foreign lpvm {noalias} mutate(~tmp#10##1:position.position, ?tmp#15##1:position.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#16##0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~reg##3:caret.region, ?reg##4:caret.region, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#15##1:position.position) @caret:nn:nn


gen#1 > (2 calls)
0: caret.gen#1<0>[410bae77d3]
gen#1(reg##0:caret.region, [tmp#0##0:caret.region], [tmp#1##0:position.position], [tmp#2##0:position.position])<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: [InterestingUnaliased 0]
    foreign lpvm access(~reg##0:caret.region, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:position.position) @caret:nn:nn
    foreign lpvm access(tmp#6##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @position:nn:nn
    foreign llvm add(~tmp#5##0:wybe.int, 1:wybe.int, ?tmp#5##1:wybe.int) @int:nn:nn
    foreign lpvm {noalias} mutate(~tmp#6##0:position.position, ?tmp#6##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##1:wybe.int) @position:nn:nn
    foreign lpvm access(~tmp#6##1:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?ten##0:wybe.int) @position:nn:nn
    wybe.string.print<0>("now ten = ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7 @caret:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~ten##0:wybe.int, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#22##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#23##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn
 [410bae77d3] [NonAliasedParam 0] :
    foreign lpvm access(~reg##0:caret.region, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:position.position) @caret:nn:nn
    foreign lpvm access(tmp#6##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @position:nn:nn
    foreign llvm add(~tmp#5##0:wybe.int, 1:wybe.int, ?tmp#5##1:wybe.int) @int:nn:nn
    foreign lpvm {noalias} mutate(~tmp#6##0:position.position, ?tmp#6##1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#5##1:wybe.int) @position:nn:nn
    foreign lpvm access(~tmp#6##1:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?ten##0:wybe.int) @position:nn:nn
    wybe.string.print<0>("now ten = ":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7 @caret:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#21##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~ten##0:wybe.int, ~tmp#21##0:wybe.phantom, ?tmp#22##0:wybe.phantom) @int:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#22##0:wybe.phantom, ?tmp#23##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#23##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'caret'


 


@caret.1 =    constant {i64, i64} { i64 6, i64 ptrtoint ([?? x i8]* @caret.0 to i64) }


@caret.3 =    constant {i64, i64} { i64 10, i64 ptrtoint ([?? x i8]* @caret.2 to i64) }


@caret.2 =    constant [?? x i8] c"now ten = \00"


@caret.0 =    constant [?? x i8] c"ten = \00"


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external fastcc  i64 @"wybe.int.max<0>"(i64, i64)    


declare external fastcc  i64 @"wybe.int.min<0>"(i64, i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"caret.<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 0, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 1, i64* %7 
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  store  i64 10, i64* %12 
  %13 = add   i64 %10, 8 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 12, i64* %15 
  %16 = trunc i64 16 to i32  
  %17 = tail call ccc  i8*  @wybe_malloc(i32  %16)  
  %18 = ptrtoint i8* %17 to i64 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  store  i64 %2, i64* %20 
  %21 = add   i64 %18, 8 
  %22 = inttoptr i64 %21 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  store  i64 %10, i64* %23 
  %24 = inttoptr i64 %10 to i64* 
  %25 = getelementptr  i64, i64* %24, i64 0 
  %26 = load  i64, i64* %25 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @caret.1, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %26)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"caret.gen#1<0>[410bae77d3]"(i64  %18)  
  ret void 
}


define external fastcc  i64 @"caret.expand_region<0>"(i64  %"reg##0", i64  %"point##0")    {
entry:
  %0 = inttoptr i64 %"reg##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  %5 = load  i64, i64* %4 
  %6 = inttoptr i64 %"point##0" to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  %8 = load  i64, i64* %7 
  %"1#tmp#1##0" = tail call fastcc  i64  @"wybe.int.min<0>"(i64  %5, i64  %8)  
  %9 = trunc i64 16 to i32  
  %10 = tail call ccc  i8*  @wybe_malloc(i32  %9)  
  %11 = ptrtoint i8* %10 to i64 
  %12 = inttoptr i64 %11 to i8* 
  %13 = inttoptr i64 %2 to i8* 
  %14 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %12, i8*  %13, i32  %14, i1  0)  
  %15 = inttoptr i64 %11 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  store  i64 %"1#tmp#1##0", i64* %16 
  %17 = trunc i64 16 to i32  
  %18 = tail call ccc  i8*  @wybe_malloc(i32  %17)  
  %19 = ptrtoint i8* %18 to i64 
  %20 = inttoptr i64 %19 to i8* 
  %21 = inttoptr i64 %"reg##0" to i8* 
  %22 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %20, i8*  %21, i32  %22, i1  0)  
  %23 = inttoptr i64 %19 to i64* 
  %24 = getelementptr  i64, i64* %23, i64 0 
  store  i64 %11, i64* %24 
  %25 = add   i64 %11, 8 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  %28 = load  i64, i64* %27 
  %29 = add   i64 %"point##0", 8 
  %30 = inttoptr i64 %29 to i64* 
  %31 = getelementptr  i64, i64* %30, i64 0 
  %32 = load  i64, i64* %31 
  %"1#tmp#6##0" = tail call fastcc  i64  @"wybe.int.min<0>"(i64  %28, i64  %32)  
  %33 = trunc i64 16 to i32  
  %34 = tail call ccc  i8*  @wybe_malloc(i32  %33)  
  %35 = ptrtoint i8* %34 to i64 
  %36 = inttoptr i64 %35 to i8* 
  %37 = inttoptr i64 %11 to i8* 
  %38 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %36, i8*  %37, i32  %38, i1  0)  
  %39 = add   i64 %35, 8 
  %40 = inttoptr i64 %39 to i64* 
  %41 = getelementptr  i64, i64* %40, i64 0 
  store  i64 %"1#tmp#6##0", i64* %41 
  %42 = trunc i64 16 to i32  
  %43 = tail call ccc  i8*  @wybe_malloc(i32  %42)  
  %44 = ptrtoint i8* %43 to i64 
  %45 = inttoptr i64 %44 to i8* 
  %46 = inttoptr i64 %19 to i8* 
  %47 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %45, i8*  %46, i32  %47, i1  0)  
  %48 = inttoptr i64 %44 to i64* 
  %49 = getelementptr  i64, i64* %48, i64 0 
  store  i64 %35, i64* %49 
  %50 = add   i64 %44, 8 
  %51 = inttoptr i64 %50 to i64* 
  %52 = getelementptr  i64, i64* %51, i64 0 
  %53 = load  i64, i64* %52 
  %54 = inttoptr i64 %53 to i64* 
  %55 = getelementptr  i64, i64* %54, i64 0 
  %56 = load  i64, i64* %55 
  %"1#tmp#11##0" = tail call fastcc  i64  @"wybe.int.max<0>"(i64  %56, i64  %8)  
  %57 = trunc i64 16 to i32  
  %58 = tail call ccc  i8*  @wybe_malloc(i32  %57)  
  %59 = ptrtoint i8* %58 to i64 
  %60 = inttoptr i64 %59 to i8* 
  %61 = inttoptr i64 %53 to i8* 
  %62 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %60, i8*  %61, i32  %62, i1  0)  
  %63 = inttoptr i64 %59 to i64* 
  %64 = getelementptr  i64, i64* %63, i64 0 
  store  i64 %"1#tmp#11##0", i64* %64 
  %65 = trunc i64 16 to i32  
  %66 = tail call ccc  i8*  @wybe_malloc(i32  %65)  
  %67 = ptrtoint i8* %66 to i64 
  %68 = inttoptr i64 %67 to i8* 
  %69 = inttoptr i64 %44 to i8* 
  %70 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %68, i8*  %69, i32  %70, i1  0)  
  %71 = add   i64 %67, 8 
  %72 = inttoptr i64 %71 to i64* 
  %73 = getelementptr  i64, i64* %72, i64 0 
  store  i64 %59, i64* %73 
  %74 = add   i64 %59, 8 
  %75 = inttoptr i64 %74 to i64* 
  %76 = getelementptr  i64, i64* %75, i64 0 
  %77 = load  i64, i64* %76 
  %"1#tmp#16##0" = tail call fastcc  i64  @"wybe.int.max<0>"(i64  %77, i64  %32)  
  %78 = trunc i64 16 to i32  
  %79 = tail call ccc  i8*  @wybe_malloc(i32  %78)  
  %80 = ptrtoint i8* %79 to i64 
  %81 = inttoptr i64 %80 to i8* 
  %82 = inttoptr i64 %59 to i8* 
  %83 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %81, i8*  %82, i32  %83, i1  0)  
  %84 = add   i64 %80, 8 
  %85 = inttoptr i64 %84 to i64* 
  %86 = getelementptr  i64, i64* %85, i64 0 
  store  i64 %"1#tmp#16##0", i64* %86 
  %87 = trunc i64 16 to i32  
  %88 = tail call ccc  i8*  @wybe_malloc(i32  %87)  
  %89 = ptrtoint i8* %88 to i64 
  %90 = inttoptr i64 %89 to i8* 
  %91 = inttoptr i64 %67 to i8* 
  %92 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %90, i8*  %91, i32  %92, i1  0)  
  %93 = add   i64 %89, 8 
  %94 = inttoptr i64 %93 to i64* 
  %95 = getelementptr  i64, i64* %94, i64 0 
  store  i64 %80, i64* %95 
  ret i64 %89 
}


define external fastcc  void @"caret.gen#1<0>"(i64  %"reg##0")    {
entry:
  %0 = add   i64 %"reg##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %"1#tmp#5##1" = add   i64 %6, 1 
  %7 = trunc i64 16 to i32  
  %8 = tail call ccc  i8*  @wybe_malloc(i32  %7)  
  %9 = ptrtoint i8* %8 to i64 
  %10 = inttoptr i64 %9 to i8* 
  %11 = inttoptr i64 %3 to i8* 
  %12 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %10, i8*  %11, i32  %12, i1  0)  
  %13 = inttoptr i64 %9 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  store  i64 %"1#tmp#5##1", i64* %14 
  %15 = inttoptr i64 %9 to i64* 
  %16 = getelementptr  i64, i64* %15, i64 0 
  %17 = load  i64, i64* %16 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @caret.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %17)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"caret.gen#1<0>[410bae77d3]"(i64  %"reg##0")    {
entry:
  %0 = add   i64 %"reg##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %"1#tmp#5##1" = add   i64 %6, 1 
  %7 = inttoptr i64 %3 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"1#tmp#5##1", i64* %8 
  %9 = inttoptr i64 %3 to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @caret.3, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_int(i64  %11)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module caret.region
  representation  : address
  public submods  : 
  public resources: 
  public procs    : caret.region.=<0>
                    caret.region.lower_left<0>
                    caret.region.lower_left<1>
                    caret.region.region<0>
                    caret.region.region<1>
                    caret.region.upper_right<0>
                    caret.region.upper_right<1>
                    caret.region.~=<0>
  imports         : use caret
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: caret.region.=<0>
=(#left##0:caret.region, #right##0:caret.region, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:caret.region, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#lower_left##0:position.position) @caret:nn:nn
    foreign lpvm access(~#left##0:caret.region, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#upper_right##0:position.position) @caret:nn:nn
    foreign lpvm access(#right##0:caret.region, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#lower_left##0:position.position) @caret:nn:nn
    foreign lpvm access(~#right##0:caret.region, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#upper_right##0:position.position) @caret:nn:nn
    foreign lpvm access(#left#lower_left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#left#lower_left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @position:nn:nn
    foreign lpvm access(#right#lower_left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#right#lower_left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~tmp#7##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#11##0:wybe.bool) @int:nn:nn
    case ~tmp#11##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#10##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
        case ~tmp#1##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#left#upper_right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#14##0:wybe.int) @position:nn:nn
            foreign lpvm access(~#left#upper_right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.int) @position:nn:nn
            foreign lpvm access(#right#upper_right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#16##0:wybe.int) @position:nn:nn
            foreign lpvm access(~#right#upper_right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#17##0:wybe.int) @position:nn:nn
            foreign llvm icmp_eq(~tmp#14##0:wybe.int, ~tmp#16##0:wybe.int, ?tmp#18##0:wybe.bool) @int:nn:nn
            case ~tmp#18##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~tmp#15##0:wybe.int, ~tmp#17##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn





lower_left > public {inline} (0 calls)
0: caret.region.lower_left<0>
lower_left(#rec##0:caret.region, ?#result##0:position.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:caret.region, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:position.position) @caret:nn:nn
lower_left > public {inline} (0 calls)
1: caret.region.lower_left<1>
lower_left(#rec##0:caret.region, ?#rec##1:caret.region, #field##0:position.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm mutate(~#rec##0:caret.region, ?#rec##1:caret.region, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:position.position) @caret:nn:nn


region > public {inline} (0 calls)
0: caret.region.region<0>
region(lower_left##0:position.position, upper_right##0:position.position, ?#result##0:caret.region)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:caret.region) @caret:nn:nn
    foreign lpvm mutate(~#rec##0:caret.region, ?#rec##1:caret.region, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~lower_left##0:position.position) @caret:nn:nn
    foreign lpvm mutate(~#rec##1:caret.region, ?#result##0:caret.region, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~upper_right##0:position.position) @caret:nn:nn
region > public {inline} (6 calls)
1: caret.region.region<1>
region(?lower_left##0:position.position, ?upper_right##0:position.position, #result##0:caret.region)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:caret.region, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?lower_left##0:position.position) @caret:nn:nn
    foreign lpvm access(~#result##0:caret.region, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?upper_right##0:position.position) @caret:nn:nn


upper_right > public {inline} (0 calls)
0: caret.region.upper_right<0>
upper_right(#rec##0:caret.region, ?#result##0:position.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:caret.region, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:position.position) @caret:nn:nn
upper_right > public {inline} (0 calls)
1: caret.region.upper_right<1>
upper_right(#rec##0:caret.region, ?#rec##1:caret.region, #field##0:position.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm mutate(~#rec##0:caret.region, ?#rec##1:caret.region, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:position.position) @caret:nn:nn


~= > public {inline} (0 calls)
0: caret.region.~=<0>
~=(#left##0:caret.region, #right##0:caret.region, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:caret.region, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:position.position) @caret:nn:nn
    foreign lpvm access(~#left##0:caret.region, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:position.position) @caret:nn:nn
    foreign lpvm access(#right##0:caret.region, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:position.position) @caret:nn:nn
    foreign lpvm access(~#right##0:caret.region, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:position.position) @caret:nn:nn
    foreign lpvm access(tmp#3##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#7##0:wybe.int) @position:nn:nn
    foreign lpvm access(~tmp#3##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#8##0:wybe.int) @position:nn:nn
    foreign lpvm access(tmp#5##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.int) @position:nn:nn
    foreign lpvm access(~tmp#5##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#10##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~tmp#7##0:wybe.int, ~tmp#9##0:wybe.int, ?tmp#11##0:wybe.bool) @int:nn:nn
    case ~tmp#11##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#10##0:wybe.int, ~tmp#8##0:wybe.int, ?tmp#12##0:wybe.bool) @int:nn:nn
        case ~tmp#12##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
            foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(tmp#4##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#13##0:wybe.int) @position:nn:nn
            foreign lpvm access(~tmp#4##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#14##0:wybe.int) @position:nn:nn
            foreign lpvm access(tmp#6##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#15##0:wybe.int) @position:nn:nn
            foreign lpvm access(~tmp#6##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#16##0:wybe.int) @position:nn:nn
            foreign llvm icmp_eq(~tmp#13##0:wybe.int, ~tmp#15##0:wybe.int, ?tmp#17##0:wybe.bool) @int:nn:nn
            case ~tmp#17##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
                foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

            1:
                foreign llvm icmp_eq(~tmp#14##0:wybe.int, ~tmp#16##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
                foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)




  LLVM code       :

; ModuleID = 'caret.region'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"caret.region.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %14 = inttoptr i64 %2 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  %16 = load  i64, i64* %15 
  %17 = add   i64 %2, 8 
  %18 = inttoptr i64 %17 to i64* 
  %19 = getelementptr  i64, i64* %18, i64 0 
  %20 = load  i64, i64* %19 
  %21 = inttoptr i64 %9 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  %23 = load  i64, i64* %22 
  %24 = add   i64 %9, 8 
  %25 = inttoptr i64 %24 to i64* 
  %26 = getelementptr  i64, i64* %25, i64 0 
  %27 = load  i64, i64* %26 
  %"1#tmp#11##0" = icmp eq i64 %16, %23 
  br i1 %"1#tmp#11##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#1##0" = icmp eq i64 %27, %20 
  br i1 %"2#tmp#1##0", label %if.then1, label %if.else1 
if.else:
  ret i1 0 
if.then1:
  %28 = inttoptr i64 %6 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %31 = add   i64 %6, 8 
  %32 = inttoptr i64 %31 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  %34 = load  i64, i64* %33 
  %35 = inttoptr i64 %13 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  %37 = load  i64, i64* %36 
  %38 = add   i64 %13, 8 
  %39 = inttoptr i64 %38 to i64* 
  %40 = getelementptr  i64, i64* %39, i64 0 
  %41 = load  i64, i64* %40 
  %"4#tmp#18##0" = icmp eq i64 %30, %37 
  br i1 %"4#tmp#18##0", label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %"6##success##0" = icmp eq i64 %34, %41 
  ret i1 %"6##success##0" 
if.else2:
  ret i1 0 
}


define external fastcc  i64 @"caret.region.lower_left<0>"(i64  %"#rec##0")    {
entry:
  %0 = inttoptr i64 %"#rec##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  ret i64 %2 
}


define external fastcc  i64 @"caret.region.lower_left<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = inttoptr i64 %2 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"#field##0", i64* %7 
  ret i64 %2 
}


define external fastcc  i64 @"caret.region.region<0>"(i64  %"lower_left##0", i64  %"upper_right##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"lower_left##0", i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"upper_right##0", i64* %7 
  ret i64 %2 
}


define external fastcc  {i64, i64} @"caret.region.region<1>"(i64  %"#result##0")    {
entry:
  %0 = inttoptr i64 %"#result##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#result##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i64} undef, i64 %2, 0 
  %8 = insertvalue {i64, i64} %7, i64 %6, 1 
  ret {i64, i64} %8 
}


define external fastcc  i64 @"caret.region.upper_right<0>"(i64  %"#rec##0")    {
entry:
  %0 = add   i64 %"#rec##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  ret i64 %3 
}


define external fastcc  i64 @"caret.region.upper_right<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"#field##0", i64* %8 
  ret i64 %2 
}


define external fastcc  i1 @"caret.region.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %14 = inttoptr i64 %2 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  %16 = load  i64, i64* %15 
  %17 = add   i64 %2, 8 
  %18 = inttoptr i64 %17 to i64* 
  %19 = getelementptr  i64, i64* %18, i64 0 
  %20 = load  i64, i64* %19 
  %21 = inttoptr i64 %9 to i64* 
  %22 = getelementptr  i64, i64* %21, i64 0 
  %23 = load  i64, i64* %22 
  %24 = add   i64 %9, 8 
  %25 = inttoptr i64 %24 to i64* 
  %26 = getelementptr  i64, i64* %25, i64 0 
  %27 = load  i64, i64* %26 
  %"1#tmp#11##0" = icmp eq i64 %16, %23 
  br i1 %"1#tmp#11##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#12##0" = icmp eq i64 %27, %20 
  br i1 %"2#tmp#12##0", label %if.then1, label %if.else1 
if.else:
  %"3##success##0" = xor i1 0, 1 
  ret i1 %"3##success##0" 
if.then1:
  %28 = inttoptr i64 %6 to i64* 
  %29 = getelementptr  i64, i64* %28, i64 0 
  %30 = load  i64, i64* %29 
  %31 = add   i64 %6, 8 
  %32 = inttoptr i64 %31 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  %34 = load  i64, i64* %33 
  %35 = inttoptr i64 %13 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  %37 = load  i64, i64* %36 
  %38 = add   i64 %13, 8 
  %39 = inttoptr i64 %38 to i64* 
  %40 = getelementptr  i64, i64* %39, i64 0 
  %41 = load  i64, i64* %40 
  %"4#tmp#17##0" = icmp eq i64 %30, %37 
  br i1 %"4#tmp#17##0", label %if.then2, label %if.else2 
if.else1:
  %"5##success##0" = xor i1 0, 1 
  ret i1 %"5##success##0" 
if.then2:
  %"6#tmp#0##0" = icmp eq i64 %34, %41 
  %"6##success##0" = xor i1 %"6#tmp#0##0", 1 
  ret i1 %"6##success##0" 
if.else2:
  %"7##success##0" = xor i1 0, 1 
  ret i1 %"7##success##0" 
}
--------------------------------------------------
 Module position
  representation  : (not a type)
  public submods  : position -> position.position
  public resources: 
  public procs    : position.printPosition<0>
                    position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  imports         : public use position.position
                    use wybe
  resources       : 
  submodules      : position.position
  procs           : 

printPosition > public (0 calls)
0: position.printPosition<0>
printPosition(pos##0:position.position)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    wybe.string.print<0>(" (":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @position:nn:nn
    foreign lpvm access(pos##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.int) @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#0##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#5##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
    wybe.string.print<0>(",":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @position:nn:nn
    foreign lpvm access(~pos##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#1##0:wybe.int) @position:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#8##0:wybe.phantom) @int:nn:nn
    foreign c print_int(~tmp#1##0:wybe.int, ~tmp#8##0:wybe.phantom, ?tmp#9##0:wybe.phantom) @int:nn:nn
    foreign lpvm store(~%tmp#9##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @int:nn:nn
    wybe.string.print<0>(")":wybe.string)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #7 @string:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#11##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#11##0:wybe.phantom, ?tmp#12##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#12##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'position'


 


@position.3 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @position.2 to i64) }


@position.5 =    constant {i64, i64} { i64 1, i64 ptrtoint ([?? x i8]* @position.4 to i64) }


@position.1 =    constant {i64, i64} { i64 2, i64 ptrtoint ([?? x i8]* @position.0 to i64) }


@position.0 =    constant [?? x i8] c" (\00"


@position.4 =    constant [?? x i8] c")\00"


@position.2 =    constant [?? x i8] c",\00"


declare external ccc  void @putchar(i8)    


declare external fastcc  void @"wybe.string.print<0>"(i64)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"position.printPosition<0>"(i64  %"pos##0")    {
entry:
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.1, i32 0, i32 0) to i64))  
  %0 = inttoptr i64 %"pos##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  tail call ccc  void  @print_int(i64  %2)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.3, i32 0, i32 0) to i64))  
  %3 = add   i64 %"pos##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  tail call ccc  void  @print_int(i64  %6)  
  tail call fastcc  void  @"wybe.string.print<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @position.5, i32 0, i32 0) to i64))  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module position.position
  representation  : address
  public submods  : 
  public resources: 
  public procs    : position.position.=<0>
                    position.position.position<0>
                    position.position.position<1>
                    position.position.x<0>
                    position.position.x<1>
                    position.position.y<0>
                    position.position.y<1>
                    position.position.~=<0>
  imports         : use position
                    use wybe
  resources       : 
  procs           : 

= > public {inline} (1 calls)
0: position.position.=<0>
=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#y##0:wybe.int) @position:nn:nn
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#y##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~#left#x##0:wybe.int, ~#right#x##0:wybe.int, ?tmp#1##0:wybe.bool) @int:nn:nn
    case ~tmp#1##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~#left#y##0:wybe.int, ~#right#y##0:wybe.int, ?#success##0:wybe.bool) @int:nn:nn



position > public {inline} (0 calls)
0: position.position.position<0>
position(x##0:wybe.int, y##0:wybe.int, ?#result##0:position.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:position.position) @position:nn:nn
    foreign lpvm mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~x##0:wybe.int) @position:nn:nn
    foreign lpvm mutate(~#rec##1:position.position, ?#result##0:position.position, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~y##0:wybe.int) @position:nn:nn
position > public {inline} (6 calls)
1: position.position.position<1>
position(?x##0:wybe.int, ?y##0:wybe.int, #result##0:position.position)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#result##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?x##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#result##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?y##0:wybe.int) @position:nn:nn


x > public {inline} (0 calls)
0: position.position.x<0>
x(#rec##0:position.position, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @position:nn:nn
x > public {inline} (0 calls)
1: position.position.x<1>
x(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @position:nn:nn


y > public {inline} (0 calls)
0: position.position.y<0>
y(#rec##0:position.position, ?#result##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(~#rec##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @position:nn:nn
y > public {inline} (0 calls)
1: position.position.y<1>
y(#rec##0:position.position, ?#rec##1:position.position, #field##0:wybe.int)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm {noalias} mutate(~#rec##0:position.position, ?#rec##1:position.position, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @position:nn:nn


~= > public {inline} (0 calls)
0: position.position.~=<0>
~=(#left##0:position.position, #right##0:position.position, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm access(#left##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#3##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#left##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#4##0:wybe.int) @position:nn:nn
    foreign lpvm access(#right##0:position.position, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#5##0:wybe.int) @position:nn:nn
    foreign lpvm access(~#right##0:position.position, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tmp#6##0:wybe.int) @position:nn:nn
    foreign llvm icmp_eq(~tmp#3##0:wybe.int, ~tmp#5##0:wybe.int, ?tmp#7##0:wybe.bool) @int:nn:nn
    case ~tmp#7##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?tmp#0##0:wybe.bool)
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

    1:
        foreign llvm icmp_eq(~tmp#4##0:wybe.int, ~tmp#6##0:wybe.int, ?tmp#0##0:wybe.bool) @int:nn:nn
        foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)


  LLVM code       :

; ModuleID = 'position.position'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"position.position.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %"1#tmp#1##0" = icmp eq i64 %2, %9 
  br i1 %"1#tmp#1##0", label %if.then, label %if.else 
if.then:
  %"2##success##0" = icmp eq i64 %6, %13 
  ret i1 %"2##success##0" 
if.else:
  ret i1 0 
}


define external fastcc  i64 @"position.position.position<0>"(i64  %"x##0", i64  %"y##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"x##0", i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"y##0", i64* %7 
  ret i64 %2 
}


define external fastcc  {i64, i64} @"position.position.position<1>"(i64  %"#result##0")    {
entry:
  %0 = inttoptr i64 %"#result##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#result##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i64} undef, i64 %2, 0 
  %8 = insertvalue {i64, i64} %7, i64 %6, 1 
  ret {i64, i64} %8 
}


define external fastcc  i64 @"position.position.x<0>"(i64  %"#rec##0")    {
entry:
  %0 = inttoptr i64 %"#rec##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  ret i64 %2 
}


define external fastcc  i64 @"position.position.x<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = inttoptr i64 %2 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"#field##0", i64* %7 
  ret i64 %2 
}


define external fastcc  i64 @"position.position.y<0>"(i64  %"#rec##0")    {
entry:
  %0 = add   i64 %"#rec##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  ret i64 %3 
}


define external fastcc  i64 @"position.position.y<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"#field##0", i64* %8 
  ret i64 %2 
}


define external fastcc  i1 @"position.position.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %"1#tmp#7##0" = icmp eq i64 %2, %9 
  br i1 %"1#tmp#7##0", label %if.then, label %if.else 
if.then:
  %"2#tmp#0##0" = icmp eq i64 %6, %13 
  %"2##success##0" = xor i1 %"2#tmp#0##0", 1 
  ret i1 %"2##success##0" 
if.else:
  %"3##success##0" = xor i1 0, 1 
  ret i1 %"3##success##0" 
}
