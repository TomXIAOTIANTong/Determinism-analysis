======================================================================
AFTER EVERYTHING:
 Module hypot
  representation  : (not a type)
  public submods  : 
  public resources: 
  public procs    : hypot.<0>
  imports         : use wybe
  resources       : 
  procs           : 

*main* > public {impure} (0 calls)
0: hypot.<0>
(io##0:wybe.phantom, ?io##14:wybe.phantom):
 AliasPairs: []
 InterestingCallProperties: []
    wybe.string.print_string<0>("hypot(3,4) = ":wybe.string, ~#io##0:wybe.phantom, ?#io##1:wybe.phantom) #22 @io:nn:nn
    foreign c llvm.sqrt.f64(25.0:wybe.float, ?tmp#0##0:wybe.float) @float:nn:nn
    foreign c print_float(~tmp#0##0:wybe.float, ~#io##1:wybe.phantom, ?tmp#17##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#17##0:wybe.phantom, ?#io##2:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("area(5) = ":wybe.string, ~#io##2:wybe.phantom, ?#io##3:wybe.phantom) #23 @io:nn:nn
    foreign c print_float(78.53981633974483:wybe.float, ~#io##3:wybe.phantom, ?tmp#24##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#24##0:wybe.phantom, ?#io##4:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("e = ":wybe.string, ~#io##4:wybe.phantom, ?#io##5:wybe.phantom) #24 @io:nn:nn
    foreign c print_float(2.7182818284590455:wybe.float, ~#io##5:wybe.phantom, ?#io##6:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>(" = ":wybe.string, ~#io##6:wybe.phantom, ?#io##7:wybe.phantom) #25 @io:nn:nn
    foreign c llvm.exp.f64(1.0:wybe.float, ?tmp#3##0:wybe.float) @float:nn:nn
    foreign c print_float(~tmp#3##0:wybe.float, ~#io##7:wybe.phantom, ?tmp#34##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#34##0:wybe.phantom, ?#io##8:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("sin(30) = ":wybe.string, ~#io##8:wybe.phantom, ?#io##9:wybe.phantom) #26 @io:nn:nn
    foreign c llvm.sin.f64(30.0:wybe.float, ?tmp#4##0:wybe.float) @float:nn:nn
    foreign c print_float(~tmp#4##0:wybe.float, ~#io##9:wybe.phantom, ?tmp#40##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#40##0:wybe.phantom, ?#io##10:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("cos(30) = ":wybe.string, ~#io##10:wybe.phantom, ?#io##11:wybe.phantom) #27 @io:nn:nn
    foreign c llvm.cos.f64(30.0:wybe.float, ?tmp#5##0:wybe.float) @float:nn:nn
    foreign c print_float(~tmp#5##0:wybe.float, ~#io##11:wybe.phantom, ?tmp#46##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#46##0:wybe.phantom, ?#io##12:wybe.phantom) @io:nn:nn
    wybe.string.print_string<0>("ln(e) = ":wybe.string, ~#io##12:wybe.phantom, ?#io##13:wybe.phantom) #28 @io:nn:nn
    foreign c llvm.log.f64(2.7182818284590455:wybe.float, ?tmp#6##0:wybe.float) @float:nn:nn
    foreign c print_float(~tmp#6##0:wybe.float, ~#io##13:wybe.phantom, ?tmp#52##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#52##0:wybe.phantom, ?#io##14:wybe.phantom) @io:nn:nn


area > {inline} (1 calls)
0: hypot.area<0>
area(r##0:wybe.float, ?#result##0:wybe.float):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm fmul(~r##0:wybe.float, ~r##0:wybe.float, ?tmp#2##0:wybe.float) @float:nn:nn
    foreign llvm fmul(3.141592653589793:wybe.float, ~tmp#2##0:wybe.float, ?#result##0:wybe.float) @float:nn:nn


hypot > {inline} (1 calls)
0: hypot.hypot<0>
hypot(s1##0:wybe.float, s2##0:wybe.float, ?#result##0:wybe.float):
 AliasPairs: []
 InterestingCallProperties: []
    foreign llvm fmul(~s1##0:wybe.float, ~s1##0:wybe.float, ?tmp#2##0:wybe.float) @float:nn:nn
    foreign llvm fmul(~s2##0:wybe.float, ~s2##0:wybe.float, ?tmp#3##0:wybe.float) @float:nn:nn
    foreign llvm fadd(~tmp#2##0:wybe.float, ~tmp#3##0:wybe.float, ?tmp#1##0:wybe.float) @float:nn:nn
    foreign c llvm.sqrt.f64(~tmp#1##0:wybe.float, ?#result##0:wybe.float) @float:nn:nn

  LLVM code       :

; ModuleID = 'hypot'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_float(double)    


declare external ccc  double @llvm.log.f64(double)    


declare external fastcc  void @"wybe.string.print_string<0>"(i64)    


declare external ccc  double @llvm.cos.f64(double)    


declare external ccc  double @llvm.sin.f64(double)    


declare external ccc  double @llvm.exp.f64(double)    


declare external ccc  double @llvm.sqrt.f64(double)    


@hypot.14 =    constant {i64, i64} { i64 8, i64 ptrtoint ([?? x i8]* @hypot.13 to i64) }


@hypot.13 =    constant [?? x i8] c"ln(e) = \00"


@hypot.12 =    constant {i64, i64} { i64 10, i64 ptrtoint ([?? x i8]* @hypot.11 to i64) }


@hypot.11 =    constant [?? x i8] c"cos(30) = \00"


@hypot.10 =    constant {i64, i64} { i64 10, i64 ptrtoint ([?? x i8]* @hypot.9 to i64) }


@hypot.9 =    constant [?? x i8] c"sin(30) = \00"


@hypot.8 =    constant {i64, i64} { i64 3, i64 ptrtoint ([?? x i8]* @hypot.7 to i64) }


@hypot.7 =    constant [?? x i8] c" = \00"


@hypot.6 =    constant {i64, i64} { i64 4, i64 ptrtoint ([?? x i8]* @hypot.5 to i64) }


@hypot.5 =    constant [?? x i8] c"e = \00"


@hypot.4 =    constant {i64, i64} { i64 10, i64 ptrtoint ([?? x i8]* @hypot.3 to i64) }


@hypot.3 =    constant [?? x i8] c"area(5) = \00"


@hypot.2 =    constant {i64, i64} { i64 13, i64 ptrtoint ([?? x i8]* @hypot.1 to i64) }


@hypot.1 =    constant [?? x i8] c"hypot(3,4) = \00"


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external fastcc  void @"hypot.<0>"()    {
entry:
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @hypot.2, i32 0, i32 0) to i64))  
  %"1#tmp#0##0" = tail call ccc  double  @llvm.sqrt.f64(double  2.500000e1)  
  tail call ccc  void  @print_float(double  %"1#tmp#0##0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @hypot.4, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_float(double  7.853982e1)  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @hypot.6, i32 0, i32 0) to i64))  
  tail call ccc  void  @print_float(double  2.718282e0)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @hypot.8, i32 0, i32 0) to i64))  
  %"1#tmp#3##0" = tail call ccc  double  @llvm.exp.f64(double  1.000000e0)  
  tail call ccc  void  @print_float(double  %"1#tmp#3##0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @hypot.10, i32 0, i32 0) to i64))  
  %"1#tmp#4##0" = tail call ccc  double  @llvm.sin.f64(double  3.000000e1)  
  tail call ccc  void  @print_float(double  %"1#tmp#4##0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @hypot.12, i32 0, i32 0) to i64))  
  %"1#tmp#5##0" = tail call ccc  double  @llvm.cos.f64(double  3.000000e1)  
  tail call ccc  void  @print_float(double  %"1#tmp#5##0")  
  tail call ccc  void  @putchar(i8  10)  
  tail call fastcc  void  @"wybe.string.print_string<0>"(i64  ptrtoint (i64* getelementptr inbounds ({i64, i64}, {i64, i64}* @hypot.14, i32 0, i32 0) to i64))  
  %"1#tmp#6##0" = tail call ccc  double  @llvm.log.f64(double  2.718282e0)  
  tail call ccc  void  @print_float(double  %"1#tmp#6##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  double @"hypot.area<0>"(double  %"r##0")    {
entry:
  %"1#tmp#2##0" = fmul double %"r##0", %"r##0" 
  %"1##result##0" = fmul double 3.141593e0, %"1#tmp#2##0" 
  ret double %"1##result##0" 
}


define external fastcc  double @"hypot.hypot<0>"(double  %"s1##0", double  %"s2##0")    {
entry:
  %"1#tmp#2##0" = fmul double %"s1##0", %"s1##0" 
  %"1#tmp#3##0" = fmul double %"s2##0", %"s2##0" 
  %"1#tmp#1##0" = fadd double %"1#tmp#2##0", %"1#tmp#3##0" 
  %"1##result##0" = tail call ccc  double  @llvm.sqrt.f64(double  %"1#tmp#1##0")  
  ret double %"1##result##0" 
}
