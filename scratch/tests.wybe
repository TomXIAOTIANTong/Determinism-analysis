
def {test} do_test(f:{test}(I), i:I) { f(i) }
def {test} do_test2(f:(I, ?bool), i:I) { f(i) }
# def {test} do_test2(f:(I, ?bool), i:I) { f(i, ?b); (b = true) }
def {noinline} do_something(f:(I, ?J), i:I, ?j:J) { f(i, ?j) }

?t = {test}{
    @1 = ?_
}

if { do_test(t, 1) :: !println("*1") }
if { do_test2(t, 1) :: !println("1") }
if { do_test(t, 2) :: !println("*2") }
if { do_test2(t, 2) :: !println("2") }

!println("------")

?t = {test}{ @1 = 1 }

if { do_test(t, 1) :: !println("*1") }
if { do_test2(t, 1) :: !println("1") }
if { do_test(t, 2) :: !println("*2") }
if { do_test2(t, 2) :: !println("2") }



# if { 1 = 1 :: !println("tester") }


# ?f = { @1 + 10 = ?@2 }
# do_something(f, 1, ?j)
# !println(j)

# def print(ls:list(?a), printer:{resource}(?a)) use !io {
#     for ?i in ls {
#         !printer(i)
#         !print(", ")
#     } 
# }


# def {noinline} foo(i:I, ?j:I) { ?j = i + 1 }

# foo(1.0, ?j:int)

# !println(j)


# resource count1:counter = 0
# resource count2:counter = 0

# def count_one use !count { incr(!count) }
# def count_two use !count2 { incr(!count2) }

# def with_counter(f:{resource}(int), as:list(int), !*count1) {
#     for ?a in as {
#         !f(a, f)
#         !count_one(*count1, ?count1)
#         ?*count1 = count1
#     }
# }

# !with_counter({resource}{ 
#     ?i = 0
#     do {
#         while i < @
#         !count_one
#     }
# }, [1,2])



# def map(f:{resource}(?A, ?:?B), as:list(?A), ?bs:list(?B)) {
#     if { [?a | ?as] = as :: 
#         !f(a, ?b)
#         !map(f, as, ?bs)
#         ?bs = [b | bs]
#        | else :: ?bs = []
#        }
# }

# def map(f:{resource}(?A), as:list(?A)) {
#     if { [?a | ?as] = as :: 
#         !f(a)
#         !map(f, as)
#        }
# }

