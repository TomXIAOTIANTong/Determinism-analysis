type pair(?a, ?b) { pub pair(fst:?a, snd:?b) }

resource (?i, ?o) parsing:pair(list(?i), list(?o))

def {test} parse(parser:{test}() using {!parsing(?i, ?o)}, input:list(?i), ?output:list(?o)) {
    ?parsing = pair(input, [])
    use parsing(?i, ?o) in {
        !parser
        pair(?rest, ?output) = parsing
        length(rest, 0)
    }
}

def many(parser:{test}() using {!parsing(?i, ?o)}):{test}() using {!parsing(?i, ?o)} = 
    {test}{
        do {
            !parser(?successful)
            while successful
        }
    } using {!parsing(?i, ?o)}


?p = {test}{
    pair(?input, ?output) = parsing
    [?i | ?input] = input
    ?output = [i | output]
    pair(input, output) = ?parsing
} using {!parsing(int, int)}

if { parse(p, [1,2], ?o) :: !println(length(o)) }
