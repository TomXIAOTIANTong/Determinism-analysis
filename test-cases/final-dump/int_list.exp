======================================================================
AFTER EVERYTHING:
 Module int_list
  representation  : (not a type)
  public submods  : int_list -> int_list.int_list
  public resources: 
  public procs    : int_list.<0>
                    int_list.print<0>
                    int_list.println<0>
                    int_list.int_list.=<0>
                    int_list.int_list.cons<0>
                    int_list.int_list.cons<1>
                    int_list.int_list.head<0>
                    int_list.int_list.head<1>
                    int_list.int_list.nil<0>
                    int_list.int_list.tail<0>
                    int_list.int_list.tail<1>
                    int_list.int_list.~=<0>
  imports         : public use int_list.int_list
                    use wybe
  resources       : 
  submodules      : int_list.int_list
  procs           : 

module top-level code > public {impure} (0 calls)
0: int_list.<0>
()<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?tmp#6##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm mutate(~tmp#6##0:int_list.int_list, ?tmp#7##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 3:wybe.int) @int_list:nn:nn
    foreign lpvm mutate(~tmp#7##0:int_list.int_list, ?tmp#8##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 0:int_list.int_list) @int_list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#11##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm mutate(~tmp#11##0:int_list.int_list, ?tmp#12##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 2:wybe.int) @int_list:nn:nn
    foreign lpvm mutate(~tmp#12##0:int_list.int_list, ?tmp#13##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#8##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm alloc(16:wybe.int, ?tmp#16##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm mutate(~tmp#16##0:int_list.int_list, ?tmp#17##0:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, 1:wybe.int) @int_list:nn:nn
    foreign lpvm mutate(~tmp#17##0:int_list.int_list, ?tmp#18##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp#13##0:int_list.int_list) @int_list:nn:nn
    int_list.print<0>(~tmp#18##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #5 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#20##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#20##0:wybe.phantom, ?tmp#21##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#21##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn


print > public (2 calls)
0: int_list.print<0>
print(x##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(x##0:wybe.int, 0:wybe.int, ?tmp#2##0:wybe.bool)
    case ~tmp#2##0:wybe.bool of
    0:

    1:
        foreign lpvm access(x##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?h##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~x##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?t##0:int_list.int_list) @int_list:nn:nn
        foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#4##0:wybe.phantom) @int:nn:nn
        foreign c print_int(~h##0:wybe.int, ~tmp#4##0:wybe.phantom, ?tmp#5##0:wybe.phantom) @int:nn:nn
        foreign c putchar(' ':wybe.char, ~tmp#5##0:wybe.phantom, ?tmp#8##0:wybe.phantom) @char:nn:nn
        foreign lpvm store(~%tmp#8##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @char:nn:nn
        int_list.print<0>(~t##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #3 @int_list:nn:nn



println > public {inline} (1 calls)
0: int_list.println<0>
println(x##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.print<0>(~x##0:int_list.int_list)<{<<wybe.io.io>>}; {<<wybe.io.io>>}> #0 @int_list:nn:nn
    foreign lpvm load(<<wybe.io.io>>:wybe.phantom, ?%tmp#0##0:wybe.phantom) @io:nn:nn
    foreign c putchar('\n':wybe.char, ~tmp#0##0:wybe.phantom, ?tmp#1##0:wybe.phantom) @io:nn:nn
    foreign lpvm store(~%tmp#1##0:wybe.phantom, <<wybe.io.io>>:wybe.phantom) @io:nn:nn

  LLVM code       :

; ModuleID = 'int_list'


 


declare external ccc  void @putchar(i8)    


declare external ccc  void @print_int(i64)    


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  void @"int_list.<0>"()    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 3, i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 0, i64* %7 
  %8 = trunc i64 16 to i32  
  %9 = tail call ccc  i8*  @wybe_malloc(i32  %8)  
  %10 = ptrtoint i8* %9 to i64 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  store  i64 2, i64* %12 
  %13 = add   i64 %10, 8 
  %14 = inttoptr i64 %13 to i64* 
  %15 = getelementptr  i64, i64* %14, i64 0 
  store  i64 %2, i64* %15 
  %16 = trunc i64 16 to i32  
  %17 = tail call ccc  i8*  @wybe_malloc(i32  %16)  
  %18 = ptrtoint i8* %17 to i64 
  %19 = inttoptr i64 %18 to i64* 
  %20 = getelementptr  i64, i64* %19, i64 0 
  store  i64 1, i64* %20 
  %21 = add   i64 %18, 8 
  %22 = inttoptr i64 %21 to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  store  i64 %10, i64* %23 
  tail call fastcc  void  @"int_list.print<0>"(i64  %18)  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}


define external fastcc  void @"int_list.print<0>"(i64  %"x##0")    {
entry:
  %"1#tmp#2##0" = icmp ne i64 %"x##0", 0 
  br i1 %"1#tmp#2##0", label %if.then, label %if.else 
if.then:
  %0 = inttoptr i64 %"x##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"x##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  tail call ccc  void  @print_int(i64  %2)  
  tail call ccc  void  @putchar(i8  32)  
  tail call fastcc  void  @"int_list.print<0>"(i64  %6)  
  ret void 
if.else:
  ret void 
}


define external fastcc  void @"int_list.println<0>"(i64  %"x##0")    {
entry:
  tail call fastcc  void  @"int_list.print<0>"(i64  %"x##0")  
  tail call ccc  void  @putchar(i8  10)  
  ret void 
}
--------------------------------------------------
 Module int_list.int_list
  representation  : address
  public submods  : 
  public resources: 
  public procs    : int_list.int_list.=<0>
                    int_list.int_list.cons<0>
                    int_list.int_list.cons<1>
                    int_list.int_list.head<0>
                    int_list.int_list.head<1>
                    int_list.int_list.nil<0>
                    int_list.int_list.tail<0>
                    int_list.int_list.tail<1>
                    int_list.int_list.~=<0>
  imports         : use int_list
                    use wybe
  resources       : 
  procs           : 

= > public (2 calls)
0: int_list.int_list.=<0>
=(#left##0:int_list.int_list, #right##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#left##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm icmp_eq(~#left##0:int_list.int_list, ~#right##0:int_list.int_list, ?#success##0:wybe.bool)

    1:
        foreign lpvm access(#left##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#head##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~#left##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#left#tail##0:int_list.int_list) @int_list:nn:nn
        foreign llvm icmp_ne(#right##0:wybe.int, 0:wybe.int, ?tmp#9##0:wybe.bool)
        case ~tmp#9##0:wybe.bool of
        0:
            foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

        1:
            foreign lpvm access(#right##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#head##0:wybe.int) @int_list:nn:nn
            foreign lpvm access(~#right##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#right#tail##0:int_list.int_list) @int_list:nn:nn
            foreign llvm icmp_eq(~#left#head##0:wybe.int, ~#right#head##0:wybe.int, ?tmp#4##0:wybe.bool) @int:nn:nn
            case ~tmp#4##0:wybe.bool of
            0:
                foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)

            1:
                int_list.int_list.=<0>(~#left#tail##0:int_list.int_list, ~#right#tail##0:int_list.int_list, ?#success##0:wybe.bool) #3





cons > public {inline} (0 calls)
0: int_list.int_list.cons<0>
cons(head##0:wybe.int, tail##0:int_list.int_list, ?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign lpvm alloc(16:wybe.int, ?#rec##0:int_list.int_list) @int_list:nn:nn
    foreign lpvm mutate(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head##0:wybe.int) @int_list:nn:nn
    foreign lpvm mutate(~#rec##1:int_list.int_list, ?#result##0:int_list.int_list, 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail##0:int_list.int_list) @int_list:nn:nn
cons > public {inline} (12 calls)
1: int_list.int_list.cons<1>
cons(?head##0:wybe.int, ?tail##0:int_list.int_list, #result##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#result##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?head##0:wybe.int)
        foreign llvm move(undef:int_list.int_list, ?tail##0:int_list.int_list)

    1:
        foreign lpvm access(#result##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?head##0:wybe.int) @int_list:nn:nn
        foreign lpvm access(~#result##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?tail##0:int_list.int_list) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



head > public {inline} (0 calls)
0: int_list.int_list.head<0>
head(#rec##0:int_list.int_list, ?#result##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:wybe.int, ?#result##0:wybe.int)

    1:
        foreign lpvm access(~#rec##0:int_list.int_list, 0:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:wybe.int) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

head > public {inline} (0 calls)
1: int_list.int_list.head<1>
head(#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, #field##0:wybe.int, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list)

    1:
        foreign lpvm mutate(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:wybe.int) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



nil > public {inline} (0 calls)
0: int_list.int_list.nil<0>
nil(?#result##0:int_list.int_list)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm move(0:int_list.int_list, ?#result##0:int_list.int_list)


tail > public {inline} (0 calls)
0: int_list.int_list.tail<0>
tail(#rec##0:int_list.int_list, ?#result##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(undef:int_list.int_list, ?#result##0:int_list.int_list)

    1:
        foreign lpvm access(~#rec##0:int_list.int_list, 8:wybe.int, 16:wybe.int, 0:wybe.int, ?#result##0:int_list.int_list) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)

tail > public {inline} (0 calls)
1: int_list.int_list.tail<1>
tail(#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, #field##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    foreign llvm icmp_ne(#rec##0:wybe.int, 0:wybe.int, ?tmp#0##0:wybe.bool)
    case ~tmp#0##0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?#success##0:wybe.bool)
        foreign llvm move(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list)

    1:
        foreign lpvm {noalias} mutate(~#rec##0:int_list.int_list, ?#rec##1:int_list.int_list, 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~#field##0:int_list.int_list) @int_list:nn:nn
        foreign llvm move(1:wybe.bool, ?#success##0:wybe.bool)



~= > public {inline} (0 calls)
0: int_list.int_list.~=<0>
~=(#left##0:int_list.int_list, #right##0:int_list.int_list, ?#success##0:wybe.bool)<{}; {}>:
  AliasPairs: []
  InterestingCallProperties: []
    int_list.int_list.=<0>(~#left##0:int_list.int_list, ~#right##0:int_list.int_list, ?tmp#0##0:wybe.bool) #0
    foreign llvm xor(~tmp#0##0:wybe.bool, 1:wybe.bool, ?#success##0:wybe.bool)

  LLVM code       :

; ModuleID = 'int_list.int_list'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)    


define external fastcc  i1 @"int_list.int_list.=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#left##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = inttoptr i64 %"#left##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#left##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %"2#tmp#9##0" = icmp ne i64 %"#right##0", 0 
  br i1 %"2#tmp#9##0", label %if.then1, label %if.else1 
if.else:
  %"3##success##0" = icmp eq i64 %"#left##0", %"#right##0" 
  ret i1 %"3##success##0" 
if.then1:
  %7 = inttoptr i64 %"#right##0" to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  %9 = load  i64, i64* %8 
  %10 = add   i64 %"#right##0", 8 
  %11 = inttoptr i64 %10 to i64* 
  %12 = getelementptr  i64, i64* %11, i64 0 
  %13 = load  i64, i64* %12 
  %"4#tmp#4##0" = icmp eq i64 %2, %9 
  br i1 %"4#tmp#4##0", label %if.then2, label %if.else2 
if.else1:
  ret i1 0 
if.then2:
  %"6##success##0" = tail call fastcc  i1  @"int_list.int_list.=<0>"(i64  %6, i64  %13)  
  ret i1 %"6##success##0" 
if.else2:
  ret i1 0 
}


define external fastcc  i64 @"int_list.int_list.cons<0>"(i64  %"head##0", i64  %"tail##0")    {
entry:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i64* 
  %4 = getelementptr  i64, i64* %3, i64 0 
  store  i64 %"head##0", i64* %4 
  %5 = add   i64 %2, 8 
  %6 = inttoptr i64 %5 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"tail##0", i64* %7 
  ret i64 %2 
}


define external fastcc  {i64, i64, i1} @"int_list.int_list.cons<1>"(i64  %"#result##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#result##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = inttoptr i64 %"#result##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = add   i64 %"#result##0", 8 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  %6 = load  i64, i64* %5 
  %7 = insertvalue {i64, i64, i1} undef, i64 %2, 0 
  %8 = insertvalue {i64, i64, i1} %7, i64 %6, 1 
  %9 = insertvalue {i64, i64, i1} %8, i1 1, 2 
  ret {i64, i64, i1} %9 
if.else:
  %10 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %11 = insertvalue {i64, i64, i1} %10, i64 undef, 1 
  %12 = insertvalue {i64, i64, i1} %11, i1 0, 2 
  ret {i64, i64, i1} %12 
}


define external fastcc  {i64, i1} @"int_list.int_list.head<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#rec##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = inttoptr i64 %"#rec##0" to i64* 
  %1 = getelementptr  i64, i64* %0, i64 0 
  %2 = load  i64, i64* %1 
  %3 = insertvalue {i64, i1} undef, i64 %2, 0 
  %4 = insertvalue {i64, i1} %3, i1 1, 1 
  ret {i64, i1} %4 
if.else:
  %5 = insertvalue {i64, i1} undef, i64 undef, 0 
  %6 = insertvalue {i64, i1} %5, i1 0, 1 
  ret {i64, i1} %6 
}


define external fastcc  {i64, i1} @"int_list.int_list.head<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#rec##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = inttoptr i64 %2 to i64* 
  %7 = getelementptr  i64, i64* %6, i64 0 
  store  i64 %"#field##0", i64* %7 
  %8 = insertvalue {i64, i1} undef, i64 %2, 0 
  %9 = insertvalue {i64, i1} %8, i1 1, 1 
  ret {i64, i1} %9 
if.else:
  %10 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %11 = insertvalue {i64, i1} %10, i1 0, 1 
  ret {i64, i1} %11 
}


define external fastcc  i64 @"int_list.int_list.nil<0>"()    {
entry:
  ret i64 0 
}


define external fastcc  {i64, i1} @"int_list.int_list.tail<0>"(i64  %"#rec##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#rec##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = add   i64 %"#rec##0", 8 
  %1 = inttoptr i64 %0 to i64* 
  %2 = getelementptr  i64, i64* %1, i64 0 
  %3 = load  i64, i64* %2 
  %4 = insertvalue {i64, i1} undef, i64 %3, 0 
  %5 = insertvalue {i64, i1} %4, i1 1, 1 
  ret {i64, i1} %5 
if.else:
  %6 = insertvalue {i64, i1} undef, i64 undef, 0 
  %7 = insertvalue {i64, i1} %6, i1 0, 1 
  ret {i64, i1} %7 
}


define external fastcc  {i64, i1} @"int_list.int_list.tail<1>"(i64  %"#rec##0", i64  %"#field##0")    {
entry:
  %"1#tmp#0##0" = icmp ne i64 %"#rec##0", 0 
  br i1 %"1#tmp#0##0", label %if.then, label %if.else 
if.then:
  %0 = trunc i64 16 to i32  
  %1 = tail call ccc  i8*  @wybe_malloc(i32  %0)  
  %2 = ptrtoint i8* %1 to i64 
  %3 = inttoptr i64 %2 to i8* 
  %4 = inttoptr i64 %"#rec##0" to i8* 
  %5 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %3, i8*  %4, i32  %5, i1  0)  
  %6 = add   i64 %2, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"#field##0", i64* %8 
  %9 = insertvalue {i64, i1} undef, i64 %2, 0 
  %10 = insertvalue {i64, i1} %9, i1 1, 1 
  ret {i64, i1} %10 
if.else:
  %11 = insertvalue {i64, i1} undef, i64 %"#rec##0", 0 
  %12 = insertvalue {i64, i1} %11, i1 0, 1 
  ret {i64, i1} %12 
}


define external fastcc  i1 @"int_list.int_list.~=<0>"(i64  %"#left##0", i64  %"#right##0")    {
entry:
  %"1#tmp#0##0" = tail call fastcc  i1  @"int_list.int_list.=<0>"(i64  %"#left##0", i64  %"#right##0")  
  %"1##success##0" = xor i1 %"1#tmp#0##0", 1 
  ret i1 %"1##success##0" 
}
